
Bootloader-NucleoF446xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a3c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08002c0c  08002c0c  00012c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002db4  08002db4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002db4  08002db4  00012db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002dbc  08002dbc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dbc  08002dbc  00012dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dc0  08002dc0  00012dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002dc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000070  08002e34  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08002e34  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007770  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016a6  00000000  00000000  00027810  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006f8  00000000  00000000  00028eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000630  00000000  00000000  000295b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020cbd  00000000  00000000  00029be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000676a  00000000  00000000  0004a89d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c793c  00000000  00000000  00051007  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00118943  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e10  00000000  00000000  001189c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002bf4 	.word	0x08002bf4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08002bf4 	.word	0x08002bf4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <HAL_Init+0x40>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <HAL_Init+0x40>)
 80005ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005d0:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <HAL_Init+0x40>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a0a      	ldr	r2, [pc, #40]	; (8000600 <HAL_Init+0x40>)
 80005d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <HAL_Init+0x40>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a07      	ldr	r2, [pc, #28]	; (8000600 <HAL_Init+0x40>)
 80005e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e8:	2003      	movs	r0, #3
 80005ea:	f000 f90d 	bl	8000808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ee:	2000      	movs	r0, #0
 80005f0:	f000 f808 	bl	8000604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f4:	f001 fd44 	bl	8002080 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023c00 	.word	0x40023c00

08000604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HAL_InitTick+0x54>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_InitTick+0x58>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061a:	fbb3 f3f1 	udiv	r3, r3, r1
 800061e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f917 	bl	8000856 <HAL_SYSTICK_Config>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
 8000630:	e00e      	b.n	8000650 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b0f      	cmp	r3, #15
 8000636:	d80a      	bhi.n	800064e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000638:	2200      	movs	r2, #0
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000640:	f000 f8ed 	bl	800081e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000644:	4a06      	ldr	r2, [pc, #24]	; (8000660 <HAL_InitTick+0x5c>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800064a:	2300      	movs	r3, #0
 800064c:	e000      	b.n	8000650 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800064e:	2301      	movs	r3, #1
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000008 	.word	0x20000008
 800065c:	20000004 	.word	0x20000004
 8000660:	20000000 	.word	0x20000000

08000664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_IncTick+0x20>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_IncTick+0x24>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4413      	add	r3, r2
 8000674:	4a04      	ldr	r2, [pc, #16]	; (8000688 <HAL_IncTick+0x24>)
 8000676:	6013      	str	r3, [r2, #0]
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	20000004 	.word	0x20000004
 8000688:	20000098 	.word	0x20000098

0800068c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  return uwTick;
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <HAL_GetTick+0x14>)
 8000692:	681b      	ldr	r3, [r3, #0]
}
 8000694:	4618      	mov	r0, r3
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	20000098 	.word	0x20000098

080006a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c0:	4013      	ands	r3, r2
 80006c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006d6:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	60d3      	str	r3, [r2, #12]
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <__NVIC_GetPriorityGrouping+0x18>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	0a1b      	lsrs	r3, r3, #8
 80006f6:	f003 0307 	and.w	r3, r3, #7
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	6039      	str	r1, [r7, #0]
 8000712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000718:	2b00      	cmp	r3, #0
 800071a:	db0a      	blt.n	8000732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	b2da      	uxtb	r2, r3
 8000720:	490c      	ldr	r1, [pc, #48]	; (8000754 <__NVIC_SetPriority+0x4c>)
 8000722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000726:	0112      	lsls	r2, r2, #4
 8000728:	b2d2      	uxtb	r2, r2
 800072a:	440b      	add	r3, r1
 800072c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000730:	e00a      	b.n	8000748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4908      	ldr	r1, [pc, #32]	; (8000758 <__NVIC_SetPriority+0x50>)
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	f003 030f 	and.w	r3, r3, #15
 800073e:	3b04      	subs	r3, #4
 8000740:	0112      	lsls	r2, r2, #4
 8000742:	b2d2      	uxtb	r2, r2
 8000744:	440b      	add	r3, r1
 8000746:	761a      	strb	r2, [r3, #24]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000e100 	.word	0xe000e100
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800075c:	b480      	push	{r7}
 800075e:	b089      	sub	sp, #36	; 0x24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f003 0307 	and.w	r3, r3, #7
 800076e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	f1c3 0307 	rsb	r3, r3, #7
 8000776:	2b04      	cmp	r3, #4
 8000778:	bf28      	it	cs
 800077a:	2304      	movcs	r3, #4
 800077c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	3304      	adds	r3, #4
 8000782:	2b06      	cmp	r3, #6
 8000784:	d902      	bls.n	800078c <NVIC_EncodePriority+0x30>
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	3b03      	subs	r3, #3
 800078a:	e000      	b.n	800078e <NVIC_EncodePriority+0x32>
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000790:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000794:	69bb      	ldr	r3, [r7, #24]
 8000796:	fa02 f303 	lsl.w	r3, r2, r3
 800079a:	43da      	mvns	r2, r3
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	401a      	ands	r2, r3
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	fa01 f303 	lsl.w	r3, r1, r3
 80007ae:	43d9      	mvns	r1, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b4:	4313      	orrs	r3, r2
         );
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3724      	adds	r7, #36	; 0x24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
	...

080007c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	3b01      	subs	r3, #1
 80007d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007d4:	d301      	bcc.n	80007da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007d6:	2301      	movs	r3, #1
 80007d8:	e00f      	b.n	80007fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007da:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <SysTick_Config+0x40>)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3b01      	subs	r3, #1
 80007e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007e2:	210f      	movs	r1, #15
 80007e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007e8:	f7ff ff8e 	bl	8000708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <SysTick_Config+0x40>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007f2:	4b04      	ldr	r3, [pc, #16]	; (8000804 <SysTick_Config+0x40>)
 80007f4:	2207      	movs	r2, #7
 80007f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	e000e010 	.word	0xe000e010

08000808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff ff47 	bl	80006a4 <__NVIC_SetPriorityGrouping>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800081e:	b580      	push	{r7, lr}
 8000820:	b086      	sub	sp, #24
 8000822:	af00      	add	r7, sp, #0
 8000824:	4603      	mov	r3, r0
 8000826:	60b9      	str	r1, [r7, #8]
 8000828:	607a      	str	r2, [r7, #4]
 800082a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000830:	f7ff ff5c 	bl	80006ec <__NVIC_GetPriorityGrouping>
 8000834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	68b9      	ldr	r1, [r7, #8]
 800083a:	6978      	ldr	r0, [r7, #20]
 800083c:	f7ff ff8e 	bl	800075c <NVIC_EncodePriority>
 8000840:	4602      	mov	r2, r0
 8000842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff5d 	bl	8000708 <__NVIC_SetPriority>
}
 800084e:	bf00      	nop
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff ffb0 	bl	80007c4 <SysTick_Config>
 8000864:	4603      	mov	r3, r0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d101      	bne.n	8000880 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800087c:	2301      	movs	r3, #1
 800087e:	e011      	b.n	80008a4 <HAL_CRC_Init+0x36>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	795b      	ldrb	r3, [r3, #5]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	d105      	bne.n	8000896 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2200      	movs	r2, #0
 800088e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f001 fc1d 	bl	80020d0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2202      	movs	r2, #2
 800089a:	715a      	strb	r2, [r3, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2201      	movs	r2, #1
 80008a0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80008a2:	2300      	movs	r3, #0
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b089      	sub	sp, #36	; 0x24
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
 80008c6:	e165      	b.n	8000b94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008c8:	2201      	movs	r2, #1
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	697a      	ldr	r2, [r7, #20]
 80008d8:	4013      	ands	r3, r2
 80008da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	f040 8154 	bne.w	8000b8e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d003      	beq.n	80008f6 <HAL_GPIO_Init+0x4a>
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	2b12      	cmp	r3, #18
 80008f4:	d123      	bne.n	800093e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	08da      	lsrs	r2, r3, #3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	3208      	adds	r2, #8
 80008fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000902:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	f003 0307 	and.w	r3, r3, #7
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	220f      	movs	r2, #15
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	43db      	mvns	r3, r3
 8000914:	69ba      	ldr	r2, [r7, #24]
 8000916:	4013      	ands	r3, r2
 8000918:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	691a      	ldr	r2, [r3, #16]
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	f003 0307 	and.w	r3, r3, #7
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	69ba      	ldr	r2, [r7, #24]
 800092c:	4313      	orrs	r3, r2
 800092e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	08da      	lsrs	r2, r3, #3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3208      	adds	r2, #8
 8000938:	69b9      	ldr	r1, [r7, #24]
 800093a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	2203      	movs	r2, #3
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	43db      	mvns	r3, r3
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	4013      	ands	r3, r2
 8000954:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	f003 0203 	and.w	r2, r3, #3
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	69ba      	ldr	r2, [r7, #24]
 8000968:	4313      	orrs	r3, r2
 800096a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	69ba      	ldr	r2, [r7, #24]
 8000970:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d00b      	beq.n	8000992 <HAL_GPIO_Init+0xe6>
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	2b02      	cmp	r3, #2
 8000980:	d007      	beq.n	8000992 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000986:	2b11      	cmp	r3, #17
 8000988:	d003      	beq.n	8000992 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	2b12      	cmp	r3, #18
 8000990:	d130      	bne.n	80009f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	2203      	movs	r2, #3
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	43db      	mvns	r3, r3
 80009a4:	69ba      	ldr	r2, [r7, #24]
 80009a6:	4013      	ands	r3, r2
 80009a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	68da      	ldr	r2, [r3, #12]
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	69ba      	ldr	r2, [r7, #24]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	69ba      	ldr	r2, [r7, #24]
 80009c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009c8:	2201      	movs	r2, #1
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	43db      	mvns	r3, r3
 80009d2:	69ba      	ldr	r2, [r7, #24]
 80009d4:	4013      	ands	r3, r2
 80009d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	091b      	lsrs	r3, r3, #4
 80009de:	f003 0201 	and.w	r2, r3, #1
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	69ba      	ldr	r2, [r7, #24]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	69ba      	ldr	r2, [r7, #24]
 80009f2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	2203      	movs	r2, #3
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	43db      	mvns	r3, r3
 8000a06:	69ba      	ldr	r2, [r7, #24]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	689a      	ldr	r2, [r3, #8]
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	69ba      	ldr	r2, [r7, #24]
 8000a22:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	f000 80ae 	beq.w	8000b8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	4b5c      	ldr	r3, [pc, #368]	; (8000ba8 <HAL_GPIO_Init+0x2fc>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	4a5b      	ldr	r2, [pc, #364]	; (8000ba8 <HAL_GPIO_Init+0x2fc>)
 8000a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a40:	6453      	str	r3, [r2, #68]	; 0x44
 8000a42:	4b59      	ldr	r3, [pc, #356]	; (8000ba8 <HAL_GPIO_Init+0x2fc>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a4e:	4a57      	ldr	r2, [pc, #348]	; (8000bac <HAL_GPIO_Init+0x300>)
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	089b      	lsrs	r3, r3, #2
 8000a54:	3302      	adds	r3, #2
 8000a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	f003 0303 	and.w	r3, r3, #3
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	220f      	movs	r2, #15
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	69ba      	ldr	r2, [r7, #24]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a4e      	ldr	r2, [pc, #312]	; (8000bb0 <HAL_GPIO_Init+0x304>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d025      	beq.n	8000ac6 <HAL_GPIO_Init+0x21a>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a4d      	ldr	r2, [pc, #308]	; (8000bb4 <HAL_GPIO_Init+0x308>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d01f      	beq.n	8000ac2 <HAL_GPIO_Init+0x216>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a4c      	ldr	r2, [pc, #304]	; (8000bb8 <HAL_GPIO_Init+0x30c>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d019      	beq.n	8000abe <HAL_GPIO_Init+0x212>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a4b      	ldr	r2, [pc, #300]	; (8000bbc <HAL_GPIO_Init+0x310>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d013      	beq.n	8000aba <HAL_GPIO_Init+0x20e>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a4a      	ldr	r2, [pc, #296]	; (8000bc0 <HAL_GPIO_Init+0x314>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d00d      	beq.n	8000ab6 <HAL_GPIO_Init+0x20a>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a49      	ldr	r2, [pc, #292]	; (8000bc4 <HAL_GPIO_Init+0x318>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d007      	beq.n	8000ab2 <HAL_GPIO_Init+0x206>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a48      	ldr	r2, [pc, #288]	; (8000bc8 <HAL_GPIO_Init+0x31c>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d101      	bne.n	8000aae <HAL_GPIO_Init+0x202>
 8000aaa:	2306      	movs	r3, #6
 8000aac:	e00c      	b.n	8000ac8 <HAL_GPIO_Init+0x21c>
 8000aae:	2307      	movs	r3, #7
 8000ab0:	e00a      	b.n	8000ac8 <HAL_GPIO_Init+0x21c>
 8000ab2:	2305      	movs	r3, #5
 8000ab4:	e008      	b.n	8000ac8 <HAL_GPIO_Init+0x21c>
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	e006      	b.n	8000ac8 <HAL_GPIO_Init+0x21c>
 8000aba:	2303      	movs	r3, #3
 8000abc:	e004      	b.n	8000ac8 <HAL_GPIO_Init+0x21c>
 8000abe:	2302      	movs	r3, #2
 8000ac0:	e002      	b.n	8000ac8 <HAL_GPIO_Init+0x21c>
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e000      	b.n	8000ac8 <HAL_GPIO_Init+0x21c>
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	69fa      	ldr	r2, [r7, #28]
 8000aca:	f002 0203 	and.w	r2, r2, #3
 8000ace:	0092      	lsls	r2, r2, #2
 8000ad0:	4093      	lsls	r3, r2
 8000ad2:	69ba      	ldr	r2, [r7, #24]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ad8:	4934      	ldr	r1, [pc, #208]	; (8000bac <HAL_GPIO_Init+0x300>)
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	089b      	lsrs	r3, r3, #2
 8000ade:	3302      	adds	r3, #2
 8000ae0:	69ba      	ldr	r2, [r7, #24]
 8000ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ae6:	4b39      	ldr	r3, [pc, #228]	; (8000bcc <HAL_GPIO_Init+0x320>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	43db      	mvns	r3, r3
 8000af0:	69ba      	ldr	r2, [r7, #24]
 8000af2:	4013      	ands	r3, r2
 8000af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d003      	beq.n	8000b0a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000b02:	69ba      	ldr	r2, [r7, #24]
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b0a:	4a30      	ldr	r2, [pc, #192]	; (8000bcc <HAL_GPIO_Init+0x320>)
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b10:	4b2e      	ldr	r3, [pc, #184]	; (8000bcc <HAL_GPIO_Init+0x320>)
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	69ba      	ldr	r2, [r7, #24]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d003      	beq.n	8000b34 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000b2c:	69ba      	ldr	r2, [r7, #24]
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b34:	4a25      	ldr	r2, [pc, #148]	; (8000bcc <HAL_GPIO_Init+0x320>)
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b3a:	4b24      	ldr	r3, [pc, #144]	; (8000bcc <HAL_GPIO_Init+0x320>)
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	43db      	mvns	r3, r3
 8000b44:	69ba      	ldr	r2, [r7, #24]
 8000b46:	4013      	ands	r3, r2
 8000b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d003      	beq.n	8000b5e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000b56:	69ba      	ldr	r2, [r7, #24]
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b5e:	4a1b      	ldr	r2, [pc, #108]	; (8000bcc <HAL_GPIO_Init+0x320>)
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b64:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <HAL_GPIO_Init+0x320>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	69ba      	ldr	r2, [r7, #24]
 8000b70:	4013      	ands	r3, r2
 8000b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d003      	beq.n	8000b88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000b80:	69ba      	ldr	r2, [r7, #24]
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b88:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <HAL_GPIO_Init+0x320>)
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3301      	adds	r3, #1
 8000b92:	61fb      	str	r3, [r7, #28]
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	2b0f      	cmp	r3, #15
 8000b98:	f67f ae96 	bls.w	80008c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b9c:	bf00      	nop
 8000b9e:	3724      	adds	r7, #36	; 0x24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40013800 	.word	0x40013800
 8000bb0:	40020000 	.word	0x40020000
 8000bb4:	40020400 	.word	0x40020400
 8000bb8:	40020800 	.word	0x40020800
 8000bbc:	40020c00 	.word	0x40020c00
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40021400 	.word	0x40021400
 8000bc8:	40021800 	.word	0x40021800
 8000bcc:	40013c00 	.word	0x40013c00

08000bd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	691a      	ldr	r2, [r3, #16]
 8000be0:	887b      	ldrh	r3, [r7, #2]
 8000be2:	4013      	ands	r3, r2
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d002      	beq.n	8000bee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000be8:	2301      	movs	r3, #1
 8000bea:	73fb      	strb	r3, [r7, #15]
 8000bec:	e001      	b.n	8000bf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	807b      	strh	r3, [r7, #2]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c10:	787b      	ldrb	r3, [r7, #1]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d003      	beq.n	8000c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c16:	887a      	ldrh	r2, [r7, #2]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c1c:	e003      	b.n	8000c26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c1e:	887b      	ldrh	r3, [r7, #2]
 8000c20:	041a      	lsls	r2, r3, #16
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	619a      	str	r2, [r3, #24]
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
	...

08000c34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d101      	bne.n	8000c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	e0ca      	b.n	8000dde <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c48:	4b67      	ldr	r3, [pc, #412]	; (8000de8 <HAL_RCC_ClockConfig+0x1b4>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f003 030f 	and.w	r3, r3, #15
 8000c50:	683a      	ldr	r2, [r7, #0]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d90c      	bls.n	8000c70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c56:	4b64      	ldr	r3, [pc, #400]	; (8000de8 <HAL_RCC_ClockConfig+0x1b4>)
 8000c58:	683a      	ldr	r2, [r7, #0]
 8000c5a:	b2d2      	uxtb	r2, r2
 8000c5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c5e:	4b62      	ldr	r3, [pc, #392]	; (8000de8 <HAL_RCC_ClockConfig+0x1b4>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f003 030f 	and.w	r3, r3, #15
 8000c66:	683a      	ldr	r2, [r7, #0]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d001      	beq.n	8000c70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e0b6      	b.n	8000dde <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f003 0302 	and.w	r3, r3, #2
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d020      	beq.n	8000cbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f003 0304 	and.w	r3, r3, #4
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d005      	beq.n	8000c94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c88:	4b58      	ldr	r3, [pc, #352]	; (8000dec <HAL_RCC_ClockConfig+0x1b8>)
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	4a57      	ldr	r2, [pc, #348]	; (8000dec <HAL_RCC_ClockConfig+0x1b8>)
 8000c8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000c92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f003 0308 	and.w	r3, r3, #8
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d005      	beq.n	8000cac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ca0:	4b52      	ldr	r3, [pc, #328]	; (8000dec <HAL_RCC_ClockConfig+0x1b8>)
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	4a51      	ldr	r2, [pc, #324]	; (8000dec <HAL_RCC_ClockConfig+0x1b8>)
 8000ca6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000caa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cac:	4b4f      	ldr	r3, [pc, #316]	; (8000dec <HAL_RCC_ClockConfig+0x1b8>)
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	494c      	ldr	r1, [pc, #304]	; (8000dec <HAL_RCC_ClockConfig+0x1b8>)
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d044      	beq.n	8000d54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d107      	bne.n	8000ce2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cd2:	4b46      	ldr	r3, [pc, #280]	; (8000dec <HAL_RCC_ClockConfig+0x1b8>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d119      	bne.n	8000d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e07d      	b.n	8000dde <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d003      	beq.n	8000cf2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cee:	2b03      	cmp	r3, #3
 8000cf0:	d107      	bne.n	8000d02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cf2:	4b3e      	ldr	r3, [pc, #248]	; (8000dec <HAL_RCC_ClockConfig+0x1b8>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d109      	bne.n	8000d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e06d      	b.n	8000dde <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d02:	4b3a      	ldr	r3, [pc, #232]	; (8000dec <HAL_RCC_ClockConfig+0x1b8>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d101      	bne.n	8000d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e065      	b.n	8000dde <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d12:	4b36      	ldr	r3, [pc, #216]	; (8000dec <HAL_RCC_ClockConfig+0x1b8>)
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	f023 0203 	bic.w	r2, r3, #3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	4933      	ldr	r1, [pc, #204]	; (8000dec <HAL_RCC_ClockConfig+0x1b8>)
 8000d20:	4313      	orrs	r3, r2
 8000d22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d24:	f7ff fcb2 	bl	800068c <HAL_GetTick>
 8000d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d2a:	e00a      	b.n	8000d42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d2c:	f7ff fcae 	bl	800068c <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d901      	bls.n	8000d42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	e04d      	b.n	8000dde <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d42:	4b2a      	ldr	r3, [pc, #168]	; (8000dec <HAL_RCC_ClockConfig+0x1b8>)
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	f003 020c 	and.w	r2, r3, #12
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d1eb      	bne.n	8000d2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d54:	4b24      	ldr	r3, [pc, #144]	; (8000de8 <HAL_RCC_ClockConfig+0x1b4>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f003 030f 	and.w	r3, r3, #15
 8000d5c:	683a      	ldr	r2, [r7, #0]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d20c      	bcs.n	8000d7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d62:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <HAL_RCC_ClockConfig+0x1b4>)
 8000d64:	683a      	ldr	r2, [r7, #0]
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d6a:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <HAL_RCC_ClockConfig+0x1b4>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	683a      	ldr	r2, [r7, #0]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d001      	beq.n	8000d7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e030      	b.n	8000dde <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f003 0304 	and.w	r3, r3, #4
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d008      	beq.n	8000d9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d88:	4b18      	ldr	r3, [pc, #96]	; (8000dec <HAL_RCC_ClockConfig+0x1b8>)
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	4915      	ldr	r1, [pc, #84]	; (8000dec <HAL_RCC_ClockConfig+0x1b8>)
 8000d96:	4313      	orrs	r3, r2
 8000d98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 0308 	and.w	r3, r3, #8
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d009      	beq.n	8000dba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <HAL_RCC_ClockConfig+0x1b8>)
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	691b      	ldr	r3, [r3, #16]
 8000db2:	00db      	lsls	r3, r3, #3
 8000db4:	490d      	ldr	r1, [pc, #52]	; (8000dec <HAL_RCC_ClockConfig+0x1b8>)
 8000db6:	4313      	orrs	r3, r2
 8000db8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000dba:	f000 f851 	bl	8000e60 <HAL_RCC_GetSysClockFreq>
 8000dbe:	4601      	mov	r1, r0
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <HAL_RCC_ClockConfig+0x1b8>)
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	091b      	lsrs	r3, r3, #4
 8000dc6:	f003 030f 	and.w	r3, r3, #15
 8000dca:	4a09      	ldr	r2, [pc, #36]	; (8000df0 <HAL_RCC_ClockConfig+0x1bc>)
 8000dcc:	5cd3      	ldrb	r3, [r2, r3]
 8000dce:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd2:	4a08      	ldr	r2, [pc, #32]	; (8000df4 <HAL_RCC_ClockConfig+0x1c0>)
 8000dd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f7ff fc14 	bl	8000604 <HAL_InitTick>

  return HAL_OK;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40023c00 	.word	0x40023c00
 8000dec:	40023800 	.word	0x40023800
 8000df0:	08002d68 	.word	0x08002d68
 8000df4:	20000008 	.word	0x20000008

08000df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000008 	.word	0x20000008

08000e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000e14:	f7ff fff0 	bl	8000df8 <HAL_RCC_GetHCLKFreq>
 8000e18:	4601      	mov	r1, r0
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	0a9b      	lsrs	r3, r3, #10
 8000e20:	f003 0307 	and.w	r3, r3, #7
 8000e24:	4a03      	ldr	r2, [pc, #12]	; (8000e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000e26:	5cd3      	ldrb	r3, [r2, r3]
 8000e28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40023800 	.word	0x40023800
 8000e34:	08002d78 	.word	0x08002d78

08000e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000e3c:	f7ff ffdc 	bl	8000df8 <HAL_RCC_GetHCLKFreq>
 8000e40:	4601      	mov	r1, r0
 8000e42:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	0b5b      	lsrs	r3, r3, #13
 8000e48:	f003 0307 	and.w	r3, r3, #7
 8000e4c:	4a03      	ldr	r2, [pc, #12]	; (8000e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000e4e:	5cd3      	ldrb	r3, [r2, r3]
 8000e50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	08002d78 	.word	0x08002d78

08000e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e62:	b087      	sub	sp, #28
 8000e64:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e7a:	4bc6      	ldr	r3, [pc, #792]	; (8001194 <HAL_RCC_GetSysClockFreq+0x334>)
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	f003 030c 	and.w	r3, r3, #12
 8000e82:	2b0c      	cmp	r3, #12
 8000e84:	f200 817e 	bhi.w	8001184 <HAL_RCC_GetSysClockFreq+0x324>
 8000e88:	a201      	add	r2, pc, #4	; (adr r2, 8000e90 <HAL_RCC_GetSysClockFreq+0x30>)
 8000e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8e:	bf00      	nop
 8000e90:	08000ec5 	.word	0x08000ec5
 8000e94:	08001185 	.word	0x08001185
 8000e98:	08001185 	.word	0x08001185
 8000e9c:	08001185 	.word	0x08001185
 8000ea0:	08000ecb 	.word	0x08000ecb
 8000ea4:	08001185 	.word	0x08001185
 8000ea8:	08001185 	.word	0x08001185
 8000eac:	08001185 	.word	0x08001185
 8000eb0:	08000ed1 	.word	0x08000ed1
 8000eb4:	08001185 	.word	0x08001185
 8000eb8:	08001185 	.word	0x08001185
 8000ebc:	08001185 	.word	0x08001185
 8000ec0:	0800102d 	.word	0x0800102d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000ec4:	4bb4      	ldr	r3, [pc, #720]	; (8001198 <HAL_RCC_GetSysClockFreq+0x338>)
 8000ec6:	613b      	str	r3, [r7, #16]
       break;
 8000ec8:	e15f      	b.n	800118a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000eca:	4bb4      	ldr	r3, [pc, #720]	; (800119c <HAL_RCC_GetSysClockFreq+0x33c>)
 8000ecc:	613b      	str	r3, [r7, #16]
      break;
 8000ece:	e15c      	b.n	800118a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ed0:	4bb0      	ldr	r3, [pc, #704]	; (8001194 <HAL_RCC_GetSysClockFreq+0x334>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ed8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000eda:	4bae      	ldr	r3, [pc, #696]	; (8001194 <HAL_RCC_GetSysClockFreq+0x334>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d04a      	beq.n	8000f7c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ee6:	4bab      	ldr	r3, [pc, #684]	; (8001194 <HAL_RCC_GetSysClockFreq+0x334>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	099b      	lsrs	r3, r3, #6
 8000eec:	f04f 0400 	mov.w	r4, #0
 8000ef0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000ef4:	f04f 0200 	mov.w	r2, #0
 8000ef8:	ea03 0501 	and.w	r5, r3, r1
 8000efc:	ea04 0602 	and.w	r6, r4, r2
 8000f00:	4629      	mov	r1, r5
 8000f02:	4632      	mov	r2, r6
 8000f04:	f04f 0300 	mov.w	r3, #0
 8000f08:	f04f 0400 	mov.w	r4, #0
 8000f0c:	0154      	lsls	r4, r2, #5
 8000f0e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000f12:	014b      	lsls	r3, r1, #5
 8000f14:	4619      	mov	r1, r3
 8000f16:	4622      	mov	r2, r4
 8000f18:	1b49      	subs	r1, r1, r5
 8000f1a:	eb62 0206 	sbc.w	r2, r2, r6
 8000f1e:	f04f 0300 	mov.w	r3, #0
 8000f22:	f04f 0400 	mov.w	r4, #0
 8000f26:	0194      	lsls	r4, r2, #6
 8000f28:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000f2c:	018b      	lsls	r3, r1, #6
 8000f2e:	1a5b      	subs	r3, r3, r1
 8000f30:	eb64 0402 	sbc.w	r4, r4, r2
 8000f34:	f04f 0100 	mov.w	r1, #0
 8000f38:	f04f 0200 	mov.w	r2, #0
 8000f3c:	00e2      	lsls	r2, r4, #3
 8000f3e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000f42:	00d9      	lsls	r1, r3, #3
 8000f44:	460b      	mov	r3, r1
 8000f46:	4614      	mov	r4, r2
 8000f48:	195b      	adds	r3, r3, r5
 8000f4a:	eb44 0406 	adc.w	r4, r4, r6
 8000f4e:	f04f 0100 	mov.w	r1, #0
 8000f52:	f04f 0200 	mov.w	r2, #0
 8000f56:	0262      	lsls	r2, r4, #9
 8000f58:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8000f5c:	0259      	lsls	r1, r3, #9
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4614      	mov	r4, r2
 8000f62:	4618      	mov	r0, r3
 8000f64:	4621      	mov	r1, r4
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f04f 0400 	mov.w	r4, #0
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4623      	mov	r3, r4
 8000f70:	f7ff f9a6 	bl	80002c0 <__aeabi_uldivmod>
 8000f74:	4603      	mov	r3, r0
 8000f76:	460c      	mov	r4, r1
 8000f78:	617b      	str	r3, [r7, #20]
 8000f7a:	e049      	b.n	8001010 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f7c:	4b85      	ldr	r3, [pc, #532]	; (8001194 <HAL_RCC_GetSysClockFreq+0x334>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	099b      	lsrs	r3, r3, #6
 8000f82:	f04f 0400 	mov.w	r4, #0
 8000f86:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000f8a:	f04f 0200 	mov.w	r2, #0
 8000f8e:	ea03 0501 	and.w	r5, r3, r1
 8000f92:	ea04 0602 	and.w	r6, r4, r2
 8000f96:	4629      	mov	r1, r5
 8000f98:	4632      	mov	r2, r6
 8000f9a:	f04f 0300 	mov.w	r3, #0
 8000f9e:	f04f 0400 	mov.w	r4, #0
 8000fa2:	0154      	lsls	r4, r2, #5
 8000fa4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000fa8:	014b      	lsls	r3, r1, #5
 8000faa:	4619      	mov	r1, r3
 8000fac:	4622      	mov	r2, r4
 8000fae:	1b49      	subs	r1, r1, r5
 8000fb0:	eb62 0206 	sbc.w	r2, r2, r6
 8000fb4:	f04f 0300 	mov.w	r3, #0
 8000fb8:	f04f 0400 	mov.w	r4, #0
 8000fbc:	0194      	lsls	r4, r2, #6
 8000fbe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000fc2:	018b      	lsls	r3, r1, #6
 8000fc4:	1a5b      	subs	r3, r3, r1
 8000fc6:	eb64 0402 	sbc.w	r4, r4, r2
 8000fca:	f04f 0100 	mov.w	r1, #0
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	00e2      	lsls	r2, r4, #3
 8000fd4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000fd8:	00d9      	lsls	r1, r3, #3
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4614      	mov	r4, r2
 8000fde:	195b      	adds	r3, r3, r5
 8000fe0:	eb44 0406 	adc.w	r4, r4, r6
 8000fe4:	f04f 0100 	mov.w	r1, #0
 8000fe8:	f04f 0200 	mov.w	r2, #0
 8000fec:	02a2      	lsls	r2, r4, #10
 8000fee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8000ff2:	0299      	lsls	r1, r3, #10
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4614      	mov	r4, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	4621      	mov	r1, r4
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f04f 0400 	mov.w	r4, #0
 8001002:	461a      	mov	r2, r3
 8001004:	4623      	mov	r3, r4
 8001006:	f7ff f95b 	bl	80002c0 <__aeabi_uldivmod>
 800100a:	4603      	mov	r3, r0
 800100c:	460c      	mov	r4, r1
 800100e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001010:	4b60      	ldr	r3, [pc, #384]	; (8001194 <HAL_RCC_GetSysClockFreq+0x334>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	0c1b      	lsrs	r3, r3, #16
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	3301      	adds	r3, #1
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	fbb2 f3f3 	udiv	r3, r2, r3
 8001028:	613b      	str	r3, [r7, #16]
      break;
 800102a:	e0ae      	b.n	800118a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800102c:	4b59      	ldr	r3, [pc, #356]	; (8001194 <HAL_RCC_GetSysClockFreq+0x334>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001034:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001036:	4b57      	ldr	r3, [pc, #348]	; (8001194 <HAL_RCC_GetSysClockFreq+0x334>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d04a      	beq.n	80010d8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001042:	4b54      	ldr	r3, [pc, #336]	; (8001194 <HAL_RCC_GetSysClockFreq+0x334>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	099b      	lsrs	r3, r3, #6
 8001048:	f04f 0400 	mov.w	r4, #0
 800104c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	ea03 0501 	and.w	r5, r3, r1
 8001058:	ea04 0602 	and.w	r6, r4, r2
 800105c:	4629      	mov	r1, r5
 800105e:	4632      	mov	r2, r6
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	f04f 0400 	mov.w	r4, #0
 8001068:	0154      	lsls	r4, r2, #5
 800106a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800106e:	014b      	lsls	r3, r1, #5
 8001070:	4619      	mov	r1, r3
 8001072:	4622      	mov	r2, r4
 8001074:	1b49      	subs	r1, r1, r5
 8001076:	eb62 0206 	sbc.w	r2, r2, r6
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	f04f 0400 	mov.w	r4, #0
 8001082:	0194      	lsls	r4, r2, #6
 8001084:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001088:	018b      	lsls	r3, r1, #6
 800108a:	1a5b      	subs	r3, r3, r1
 800108c:	eb64 0402 	sbc.w	r4, r4, r2
 8001090:	f04f 0100 	mov.w	r1, #0
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	00e2      	lsls	r2, r4, #3
 800109a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800109e:	00d9      	lsls	r1, r3, #3
 80010a0:	460b      	mov	r3, r1
 80010a2:	4614      	mov	r4, r2
 80010a4:	195b      	adds	r3, r3, r5
 80010a6:	eb44 0406 	adc.w	r4, r4, r6
 80010aa:	f04f 0100 	mov.w	r1, #0
 80010ae:	f04f 0200 	mov.w	r2, #0
 80010b2:	0262      	lsls	r2, r4, #9
 80010b4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80010b8:	0259      	lsls	r1, r3, #9
 80010ba:	460b      	mov	r3, r1
 80010bc:	4614      	mov	r4, r2
 80010be:	4618      	mov	r0, r3
 80010c0:	4621      	mov	r1, r4
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f04f 0400 	mov.w	r4, #0
 80010c8:	461a      	mov	r2, r3
 80010ca:	4623      	mov	r3, r4
 80010cc:	f7ff f8f8 	bl	80002c0 <__aeabi_uldivmod>
 80010d0:	4603      	mov	r3, r0
 80010d2:	460c      	mov	r4, r1
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	e049      	b.n	800116c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010d8:	4b2e      	ldr	r3, [pc, #184]	; (8001194 <HAL_RCC_GetSysClockFreq+0x334>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	099b      	lsrs	r3, r3, #6
 80010de:	f04f 0400 	mov.w	r4, #0
 80010e2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	ea03 0501 	and.w	r5, r3, r1
 80010ee:	ea04 0602 	and.w	r6, r4, r2
 80010f2:	4629      	mov	r1, r5
 80010f4:	4632      	mov	r2, r6
 80010f6:	f04f 0300 	mov.w	r3, #0
 80010fa:	f04f 0400 	mov.w	r4, #0
 80010fe:	0154      	lsls	r4, r2, #5
 8001100:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001104:	014b      	lsls	r3, r1, #5
 8001106:	4619      	mov	r1, r3
 8001108:	4622      	mov	r2, r4
 800110a:	1b49      	subs	r1, r1, r5
 800110c:	eb62 0206 	sbc.w	r2, r2, r6
 8001110:	f04f 0300 	mov.w	r3, #0
 8001114:	f04f 0400 	mov.w	r4, #0
 8001118:	0194      	lsls	r4, r2, #6
 800111a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800111e:	018b      	lsls	r3, r1, #6
 8001120:	1a5b      	subs	r3, r3, r1
 8001122:	eb64 0402 	sbc.w	r4, r4, r2
 8001126:	f04f 0100 	mov.w	r1, #0
 800112a:	f04f 0200 	mov.w	r2, #0
 800112e:	00e2      	lsls	r2, r4, #3
 8001130:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001134:	00d9      	lsls	r1, r3, #3
 8001136:	460b      	mov	r3, r1
 8001138:	4614      	mov	r4, r2
 800113a:	195b      	adds	r3, r3, r5
 800113c:	eb44 0406 	adc.w	r4, r4, r6
 8001140:	f04f 0100 	mov.w	r1, #0
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	02a2      	lsls	r2, r4, #10
 800114a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800114e:	0299      	lsls	r1, r3, #10
 8001150:	460b      	mov	r3, r1
 8001152:	4614      	mov	r4, r2
 8001154:	4618      	mov	r0, r3
 8001156:	4621      	mov	r1, r4
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f04f 0400 	mov.w	r4, #0
 800115e:	461a      	mov	r2, r3
 8001160:	4623      	mov	r3, r4
 8001162:	f7ff f8ad 	bl	80002c0 <__aeabi_uldivmod>
 8001166:	4603      	mov	r3, r0
 8001168:	460c      	mov	r4, r1
 800116a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <HAL_RCC_GetSysClockFreq+0x334>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	0f1b      	lsrs	r3, r3, #28
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001180:	613b      	str	r3, [r7, #16]
      break;
 8001182:	e002      	b.n	800118a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <HAL_RCC_GetSysClockFreq+0x338>)
 8001186:	613b      	str	r3, [r7, #16]
      break;
 8001188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800118a:	693b      	ldr	r3, [r7, #16]
}
 800118c:	4618      	mov	r0, r3
 800118e:	371c      	adds	r7, #28
 8001190:	46bd      	mov	sp, r7
 8001192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001194:	40023800 	.word	0x40023800
 8001198:	00f42400 	.word	0x00f42400
 800119c:	007a1200 	.word	0x007a1200

080011a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011a8:	2300      	movs	r3, #0
 80011aa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f000 8083 	beq.w	80012c0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80011ba:	4b95      	ldr	r3, [pc, #596]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 030c 	and.w	r3, r3, #12
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	d019      	beq.n	80011fa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80011c6:	4b92      	ldr	r3, [pc, #584]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80011ce:	2b08      	cmp	r3, #8
 80011d0:	d106      	bne.n	80011e0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80011d2:	4b8f      	ldr	r3, [pc, #572]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011de:	d00c      	beq.n	80011fa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011e0:	4b8b      	ldr	r3, [pc, #556]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80011e8:	2b0c      	cmp	r3, #12
 80011ea:	d112      	bne.n	8001212 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ec:	4b88      	ldr	r3, [pc, #544]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011f8:	d10b      	bne.n	8001212 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fa:	4b85      	ldr	r3, [pc, #532]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d05b      	beq.n	80012be <HAL_RCC_OscConfig+0x11e>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d157      	bne.n	80012be <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e216      	b.n	8001640 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800121a:	d106      	bne.n	800122a <HAL_RCC_OscConfig+0x8a>
 800121c:	4b7c      	ldr	r3, [pc, #496]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a7b      	ldr	r2, [pc, #492]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	e01d      	b.n	8001266 <HAL_RCC_OscConfig+0xc6>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001232:	d10c      	bne.n	800124e <HAL_RCC_OscConfig+0xae>
 8001234:	4b76      	ldr	r3, [pc, #472]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a75      	ldr	r2, [pc, #468]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 800123a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	4b73      	ldr	r3, [pc, #460]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a72      	ldr	r2, [pc, #456]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800124a:	6013      	str	r3, [r2, #0]
 800124c:	e00b      	b.n	8001266 <HAL_RCC_OscConfig+0xc6>
 800124e:	4b70      	ldr	r3, [pc, #448]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a6f      	ldr	r2, [pc, #444]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	4b6d      	ldr	r3, [pc, #436]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a6c      	ldr	r2, [pc, #432]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001260:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001264:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d013      	beq.n	8001296 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800126e:	f7ff fa0d 	bl	800068c <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001274:	e008      	b.n	8001288 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001276:	f7ff fa09 	bl	800068c <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	2b64      	cmp	r3, #100	; 0x64
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e1db      	b.n	8001640 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001288:	4b61      	ldr	r3, [pc, #388]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0f0      	beq.n	8001276 <HAL_RCC_OscConfig+0xd6>
 8001294:	e014      	b.n	80012c0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001296:	f7ff f9f9 	bl	800068c <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129c:	e008      	b.n	80012b0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800129e:	f7ff f9f5 	bl	800068c <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b64      	cmp	r3, #100	; 0x64
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e1c7      	b.n	8001640 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b0:	4b57      	ldr	r3, [pc, #348]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1f0      	bne.n	800129e <HAL_RCC_OscConfig+0xfe>
 80012bc:	e000      	b.n	80012c0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012be:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d06f      	beq.n	80013ac <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80012cc:	4b50      	ldr	r3, [pc, #320]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f003 030c 	and.w	r3, r3, #12
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d017      	beq.n	8001308 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80012d8:	4b4d      	ldr	r3, [pc, #308]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80012e0:	2b08      	cmp	r3, #8
 80012e2:	d105      	bne.n	80012f0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80012e4:	4b4a      	ldr	r3, [pc, #296]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d00b      	beq.n	8001308 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012f0:	4b47      	ldr	r3, [pc, #284]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80012f8:	2b0c      	cmp	r3, #12
 80012fa:	d11c      	bne.n	8001336 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012fc:	4b44      	ldr	r3, [pc, #272]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d116      	bne.n	8001336 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001308:	4b41      	ldr	r3, [pc, #260]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d005      	beq.n	8001320 <HAL_RCC_OscConfig+0x180>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d001      	beq.n	8001320 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e18f      	b.n	8001640 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001320:	4b3b      	ldr	r3, [pc, #236]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4938      	ldr	r1, [pc, #224]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001330:	4313      	orrs	r3, r2
 8001332:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001334:	e03a      	b.n	80013ac <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d020      	beq.n	8001380 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800133e:	4b35      	ldr	r3, [pc, #212]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 8001340:	2201      	movs	r2, #1
 8001342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001344:	f7ff f9a2 	bl	800068c <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800134c:	f7ff f99e 	bl	800068c <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e170      	b.n	8001640 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800135e:	4b2c      	ldr	r3, [pc, #176]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f0      	beq.n	800134c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136a:	4b29      	ldr	r3, [pc, #164]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	4925      	ldr	r1, [pc, #148]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 800137a:	4313      	orrs	r3, r2
 800137c:	600b      	str	r3, [r1, #0]
 800137e:	e015      	b.n	80013ac <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001380:	4b24      	ldr	r3, [pc, #144]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001386:	f7ff f981 	bl	800068c <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800138e:	f7ff f97d 	bl	800068c <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e14f      	b.n	8001640 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a0:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1f0      	bne.n	800138e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0308 	and.w	r3, r3, #8
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d037      	beq.n	8001428 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d016      	beq.n	80013ee <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c0:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HAL_RCC_OscConfig+0x278>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c6:	f7ff f961 	bl	800068c <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ce:	f7ff f95d 	bl	800068c <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e12f      	b.n	8001640 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e0:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80013e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0f0      	beq.n	80013ce <HAL_RCC_OscConfig+0x22e>
 80013ec:	e01c      	b.n	8001428 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <HAL_RCC_OscConfig+0x278>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f4:	f7ff f94a 	bl	800068c <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fa:	e00f      	b.n	800141c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013fc:	f7ff f946 	bl	800068c <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d908      	bls.n	800141c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e118      	b.n	8001640 <HAL_RCC_OscConfig+0x4a0>
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800
 8001414:	42470000 	.word	0x42470000
 8001418:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800141c:	4b8a      	ldr	r3, [pc, #552]	; (8001648 <HAL_RCC_OscConfig+0x4a8>)
 800141e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1e9      	bne.n	80013fc <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 8097 	beq.w	8001564 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800143a:	4b83      	ldr	r3, [pc, #524]	; (8001648 <HAL_RCC_OscConfig+0x4a8>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10f      	bne.n	8001466 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b7f      	ldr	r3, [pc, #508]	; (8001648 <HAL_RCC_OscConfig+0x4a8>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a7e      	ldr	r2, [pc, #504]	; (8001648 <HAL_RCC_OscConfig+0x4a8>)
 8001450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
 8001456:	4b7c      	ldr	r3, [pc, #496]	; (8001648 <HAL_RCC_OscConfig+0x4a8>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001462:	2301      	movs	r3, #1
 8001464:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001466:	4b79      	ldr	r3, [pc, #484]	; (800164c <HAL_RCC_OscConfig+0x4ac>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146e:	2b00      	cmp	r3, #0
 8001470:	d118      	bne.n	80014a4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001472:	4b76      	ldr	r3, [pc, #472]	; (800164c <HAL_RCC_OscConfig+0x4ac>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a75      	ldr	r2, [pc, #468]	; (800164c <HAL_RCC_OscConfig+0x4ac>)
 8001478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800147e:	f7ff f905 	bl	800068c <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001486:	f7ff f901 	bl	800068c <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e0d3      	b.n	8001640 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001498:	4b6c      	ldr	r3, [pc, #432]	; (800164c <HAL_RCC_OscConfig+0x4ac>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d106      	bne.n	80014ba <HAL_RCC_OscConfig+0x31a>
 80014ac:	4b66      	ldr	r3, [pc, #408]	; (8001648 <HAL_RCC_OscConfig+0x4a8>)
 80014ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b0:	4a65      	ldr	r2, [pc, #404]	; (8001648 <HAL_RCC_OscConfig+0x4a8>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6713      	str	r3, [r2, #112]	; 0x70
 80014b8:	e01c      	b.n	80014f4 <HAL_RCC_OscConfig+0x354>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	2b05      	cmp	r3, #5
 80014c0:	d10c      	bne.n	80014dc <HAL_RCC_OscConfig+0x33c>
 80014c2:	4b61      	ldr	r3, [pc, #388]	; (8001648 <HAL_RCC_OscConfig+0x4a8>)
 80014c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c6:	4a60      	ldr	r2, [pc, #384]	; (8001648 <HAL_RCC_OscConfig+0x4a8>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	6713      	str	r3, [r2, #112]	; 0x70
 80014ce:	4b5e      	ldr	r3, [pc, #376]	; (8001648 <HAL_RCC_OscConfig+0x4a8>)
 80014d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d2:	4a5d      	ldr	r2, [pc, #372]	; (8001648 <HAL_RCC_OscConfig+0x4a8>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6713      	str	r3, [r2, #112]	; 0x70
 80014da:	e00b      	b.n	80014f4 <HAL_RCC_OscConfig+0x354>
 80014dc:	4b5a      	ldr	r3, [pc, #360]	; (8001648 <HAL_RCC_OscConfig+0x4a8>)
 80014de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e0:	4a59      	ldr	r2, [pc, #356]	; (8001648 <HAL_RCC_OscConfig+0x4a8>)
 80014e2:	f023 0301 	bic.w	r3, r3, #1
 80014e6:	6713      	str	r3, [r2, #112]	; 0x70
 80014e8:	4b57      	ldr	r3, [pc, #348]	; (8001648 <HAL_RCC_OscConfig+0x4a8>)
 80014ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ec:	4a56      	ldr	r2, [pc, #344]	; (8001648 <HAL_RCC_OscConfig+0x4a8>)
 80014ee:	f023 0304 	bic.w	r3, r3, #4
 80014f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d015      	beq.n	8001528 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014fc:	f7ff f8c6 	bl	800068c <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001502:	e00a      	b.n	800151a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001504:	f7ff f8c2 	bl	800068c <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001512:	4293      	cmp	r3, r2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e092      	b.n	8001640 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800151a:	4b4b      	ldr	r3, [pc, #300]	; (8001648 <HAL_RCC_OscConfig+0x4a8>)
 800151c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0ee      	beq.n	8001504 <HAL_RCC_OscConfig+0x364>
 8001526:	e014      	b.n	8001552 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001528:	f7ff f8b0 	bl	800068c <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800152e:	e00a      	b.n	8001546 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001530:	f7ff f8ac 	bl	800068c <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	f241 3288 	movw	r2, #5000	; 0x1388
 800153e:	4293      	cmp	r3, r2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e07c      	b.n	8001640 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001546:	4b40      	ldr	r3, [pc, #256]	; (8001648 <HAL_RCC_OscConfig+0x4a8>)
 8001548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1ee      	bne.n	8001530 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001552:	7dfb      	ldrb	r3, [r7, #23]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d105      	bne.n	8001564 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001558:	4b3b      	ldr	r3, [pc, #236]	; (8001648 <HAL_RCC_OscConfig+0x4a8>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	4a3a      	ldr	r2, [pc, #232]	; (8001648 <HAL_RCC_OscConfig+0x4a8>)
 800155e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001562:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d068      	beq.n	800163e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800156c:	4b36      	ldr	r3, [pc, #216]	; (8001648 <HAL_RCC_OscConfig+0x4a8>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 030c 	and.w	r3, r3, #12
 8001574:	2b08      	cmp	r3, #8
 8001576:	d060      	beq.n	800163a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	2b02      	cmp	r3, #2
 800157e:	d145      	bne.n	800160c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001580:	4b33      	ldr	r3, [pc, #204]	; (8001650 <HAL_RCC_OscConfig+0x4b0>)
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001586:	f7ff f881 	bl	800068c <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800158e:	f7ff f87d 	bl	800068c <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e04f      	b.n	8001640 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a0:	4b29      	ldr	r3, [pc, #164]	; (8001648 <HAL_RCC_OscConfig+0x4a8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1f0      	bne.n	800158e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69da      	ldr	r2, [r3, #28]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	431a      	orrs	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	019b      	lsls	r3, r3, #6
 80015bc:	431a      	orrs	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c2:	085b      	lsrs	r3, r3, #1
 80015c4:	3b01      	subs	r3, #1
 80015c6:	041b      	lsls	r3, r3, #16
 80015c8:	431a      	orrs	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ce:	061b      	lsls	r3, r3, #24
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	071b      	lsls	r3, r3, #28
 80015d8:	491b      	ldr	r1, [pc, #108]	; (8001648 <HAL_RCC_OscConfig+0x4a8>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015de:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <HAL_RCC_OscConfig+0x4b0>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e4:	f7ff f852 	bl	800068c <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ec:	f7ff f84e 	bl	800068c <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e020      	b.n	8001640 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015fe:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_RCC_OscConfig+0x4a8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0x44c>
 800160a:	e018      	b.n	800163e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160c:	4b10      	ldr	r3, [pc, #64]	; (8001650 <HAL_RCC_OscConfig+0x4b0>)
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001612:	f7ff f83b 	bl	800068c <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800161a:	f7ff f837 	bl	800068c <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e009      	b.n	8001640 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_RCC_OscConfig+0x4a8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1f0      	bne.n	800161a <HAL_RCC_OscConfig+0x47a>
 8001638:	e001      	b.n	800163e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40023800 	.word	0x40023800
 800164c:	40007000 	.word	0x40007000
 8001650:	42470060 	.word	0x42470060

08001654 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e03f      	b.n	80016e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d106      	bne.n	8001680 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 fd4a 	bl	8002114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2224      	movs	r2, #36	; 0x24
 8001684:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001696:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 f90b 	bl	80018b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	691a      	ldr	r2, [r3, #16]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80016ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	695a      	ldr	r2, [r3, #20]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80016bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68da      	ldr	r2, [r3, #12]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80016cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2220      	movs	r2, #32
 80016d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2220      	movs	r2, #32
 80016e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b088      	sub	sp, #32
 80016f2:	af02      	add	r7, sp, #8
 80016f4:	60f8      	str	r0, [r7, #12]
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	603b      	str	r3, [r7, #0]
 80016fa:	4613      	mov	r3, r2
 80016fc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b20      	cmp	r3, #32
 800170c:	f040 8083 	bne.w	8001816 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <HAL_UART_Transmit+0x2e>
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e07b      	b.n	8001818 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001726:	2b01      	cmp	r3, #1
 8001728:	d101      	bne.n	800172e <HAL_UART_Transmit+0x40>
 800172a:	2302      	movs	r3, #2
 800172c:	e074      	b.n	8001818 <HAL_UART_Transmit+0x12a>
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2200      	movs	r2, #0
 800173a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2221      	movs	r2, #33	; 0x21
 8001740:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001744:	f7fe ffa2 	bl	800068c <HAL_GetTick>
 8001748:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	88fa      	ldrh	r2, [r7, #6]
 800174e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	88fa      	ldrh	r2, [r7, #6]
 8001754:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001756:	e042      	b.n	80017de <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800175c:	b29b      	uxth	r3, r3
 800175e:	3b01      	subs	r3, #1
 8001760:	b29a      	uxth	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800176e:	d122      	bne.n	80017b6 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	2200      	movs	r2, #0
 8001778:	2180      	movs	r1, #128	; 0x80
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f000 f850 	bl	8001820 <UART_WaitOnFlagUntilTimeout>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e046      	b.n	8001818 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800179c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d103      	bne.n	80017ae <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	3302      	adds	r3, #2
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	e017      	b.n	80017de <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	3301      	adds	r3, #1
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	e013      	b.n	80017de <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	2200      	movs	r2, #0
 80017be:	2180      	movs	r1, #128	; 0x80
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f000 f82d 	bl	8001820 <UART_WaitOnFlagUntilTimeout>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e023      	b.n	8001818 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	60ba      	str	r2, [r7, #8]
 80017d6:	781a      	ldrb	r2, [r3, #0]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1b7      	bne.n	8001758 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	2200      	movs	r2, #0
 80017f0:	2140      	movs	r1, #64	; 0x40
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f000 f814 	bl	8001820 <UART_WaitOnFlagUntilTimeout>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e00a      	b.n	8001818 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2220      	movs	r2, #32
 8001806:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	e000      	b.n	8001818 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001816:	2302      	movs	r3, #2
  }
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	4613      	mov	r3, r2
 800182e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001830:	e02c      	b.n	800188c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001838:	d028      	beq.n	800188c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d007      	beq.n	8001850 <UART_WaitOnFlagUntilTimeout+0x30>
 8001840:	f7fe ff24 	bl	800068c <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	429a      	cmp	r2, r3
 800184e:	d21d      	bcs.n	800188c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800185e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	695a      	ldr	r2, [r3, #20]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f022 0201 	bic.w	r2, r2, #1
 800186e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2220      	movs	r2, #32
 8001874:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2220      	movs	r2, #32
 800187c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e00f      	b.n	80018ac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	4013      	ands	r3, r2
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	429a      	cmp	r2, r3
 800189a:	bf0c      	ite	eq
 800189c:	2301      	moveq	r3, #1
 800189e:	2300      	movne	r3, #0
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	461a      	mov	r2, r3
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d0c3      	beq.n	8001832 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80018b4:	b5b0      	push	{r4, r5, r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	431a      	orrs	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	431a      	orrs	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80018f4:	f023 030c 	bic.w	r3, r3, #12
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	68f9      	ldr	r1, [r7, #12]
 80018fe:	430b      	orrs	r3, r1
 8001900:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	699a      	ldr	r2, [r3, #24]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001920:	f040 80e4 	bne.w	8001aec <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4aab      	ldr	r2, [pc, #684]	; (8001bd8 <UART_SetConfig+0x324>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d004      	beq.n	8001938 <UART_SetConfig+0x84>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4aaa      	ldr	r2, [pc, #680]	; (8001bdc <UART_SetConfig+0x328>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d16c      	bne.n	8001a12 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001938:	f7ff fa7e 	bl	8000e38 <HAL_RCC_GetPCLK2Freq>
 800193c:	4602      	mov	r2, r0
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	009a      	lsls	r2, r3, #2
 8001946:	441a      	add	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001952:	4aa3      	ldr	r2, [pc, #652]	; (8001be0 <UART_SetConfig+0x32c>)
 8001954:	fba2 2303 	umull	r2, r3, r2, r3
 8001958:	095b      	lsrs	r3, r3, #5
 800195a:	011c      	lsls	r4, r3, #4
 800195c:	f7ff fa6c 	bl	8000e38 <HAL_RCC_GetPCLK2Freq>
 8001960:	4602      	mov	r2, r0
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	009a      	lsls	r2, r3, #2
 800196a:	441a      	add	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	fbb2 f5f3 	udiv	r5, r2, r3
 8001976:	f7ff fa5f 	bl	8000e38 <HAL_RCC_GetPCLK2Freq>
 800197a:	4602      	mov	r2, r0
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	009a      	lsls	r2, r3, #2
 8001984:	441a      	add	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001990:	4a93      	ldr	r2, [pc, #588]	; (8001be0 <UART_SetConfig+0x32c>)
 8001992:	fba2 2303 	umull	r2, r3, r2, r3
 8001996:	095b      	lsrs	r3, r3, #5
 8001998:	2264      	movs	r2, #100	; 0x64
 800199a:	fb02 f303 	mul.w	r3, r2, r3
 800199e:	1aeb      	subs	r3, r5, r3
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	3332      	adds	r3, #50	; 0x32
 80019a4:	4a8e      	ldr	r2, [pc, #568]	; (8001be0 <UART_SetConfig+0x32c>)
 80019a6:	fba2 2303 	umull	r2, r3, r2, r3
 80019aa:	095b      	lsrs	r3, r3, #5
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80019b2:	441c      	add	r4, r3
 80019b4:	f7ff fa40 	bl	8000e38 <HAL_RCC_GetPCLK2Freq>
 80019b8:	4602      	mov	r2, r0
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	009a      	lsls	r2, r3, #2
 80019c2:	441a      	add	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	fbb2 f5f3 	udiv	r5, r2, r3
 80019ce:	f7ff fa33 	bl	8000e38 <HAL_RCC_GetPCLK2Freq>
 80019d2:	4602      	mov	r2, r0
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	009a      	lsls	r2, r3, #2
 80019dc:	441a      	add	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e8:	4a7d      	ldr	r2, [pc, #500]	; (8001be0 <UART_SetConfig+0x32c>)
 80019ea:	fba2 2303 	umull	r2, r3, r2, r3
 80019ee:	095b      	lsrs	r3, r3, #5
 80019f0:	2264      	movs	r2, #100	; 0x64
 80019f2:	fb02 f303 	mul.w	r3, r2, r3
 80019f6:	1aeb      	subs	r3, r5, r3
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	3332      	adds	r3, #50	; 0x32
 80019fc:	4a78      	ldr	r2, [pc, #480]	; (8001be0 <UART_SetConfig+0x32c>)
 80019fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001a02:	095b      	lsrs	r3, r3, #5
 8001a04:	f003 0207 	and.w	r2, r3, #7
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4422      	add	r2, r4
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	e154      	b.n	8001cbc <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001a12:	f7ff f9fd 	bl	8000e10 <HAL_RCC_GetPCLK1Freq>
 8001a16:	4602      	mov	r2, r0
 8001a18:	4613      	mov	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	009a      	lsls	r2, r3, #2
 8001a20:	441a      	add	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2c:	4a6c      	ldr	r2, [pc, #432]	; (8001be0 <UART_SetConfig+0x32c>)
 8001a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a32:	095b      	lsrs	r3, r3, #5
 8001a34:	011c      	lsls	r4, r3, #4
 8001a36:	f7ff f9eb 	bl	8000e10 <HAL_RCC_GetPCLK1Freq>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	009a      	lsls	r2, r3, #2
 8001a44:	441a      	add	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	fbb2 f5f3 	udiv	r5, r2, r3
 8001a50:	f7ff f9de 	bl	8000e10 <HAL_RCC_GetPCLK1Freq>
 8001a54:	4602      	mov	r2, r0
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	009a      	lsls	r2, r3, #2
 8001a5e:	441a      	add	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6a:	4a5d      	ldr	r2, [pc, #372]	; (8001be0 <UART_SetConfig+0x32c>)
 8001a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a70:	095b      	lsrs	r3, r3, #5
 8001a72:	2264      	movs	r2, #100	; 0x64
 8001a74:	fb02 f303 	mul.w	r3, r2, r3
 8001a78:	1aeb      	subs	r3, r5, r3
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	3332      	adds	r3, #50	; 0x32
 8001a7e:	4a58      	ldr	r2, [pc, #352]	; (8001be0 <UART_SetConfig+0x32c>)
 8001a80:	fba2 2303 	umull	r2, r3, r2, r3
 8001a84:	095b      	lsrs	r3, r3, #5
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001a8c:	441c      	add	r4, r3
 8001a8e:	f7ff f9bf 	bl	8000e10 <HAL_RCC_GetPCLK1Freq>
 8001a92:	4602      	mov	r2, r0
 8001a94:	4613      	mov	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	009a      	lsls	r2, r3, #2
 8001a9c:	441a      	add	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	fbb2 f5f3 	udiv	r5, r2, r3
 8001aa8:	f7ff f9b2 	bl	8000e10 <HAL_RCC_GetPCLK1Freq>
 8001aac:	4602      	mov	r2, r0
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	009a      	lsls	r2, r3, #2
 8001ab6:	441a      	add	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac2:	4a47      	ldr	r2, [pc, #284]	; (8001be0 <UART_SetConfig+0x32c>)
 8001ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac8:	095b      	lsrs	r3, r3, #5
 8001aca:	2264      	movs	r2, #100	; 0x64
 8001acc:	fb02 f303 	mul.w	r3, r2, r3
 8001ad0:	1aeb      	subs	r3, r5, r3
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	3332      	adds	r3, #50	; 0x32
 8001ad6:	4a42      	ldr	r2, [pc, #264]	; (8001be0 <UART_SetConfig+0x32c>)
 8001ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8001adc:	095b      	lsrs	r3, r3, #5
 8001ade:	f003 0207 	and.w	r2, r3, #7
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4422      	add	r2, r4
 8001ae8:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8001aea:	e0e7      	b.n	8001cbc <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a39      	ldr	r2, [pc, #228]	; (8001bd8 <UART_SetConfig+0x324>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d004      	beq.n	8001b00 <UART_SetConfig+0x24c>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a38      	ldr	r2, [pc, #224]	; (8001bdc <UART_SetConfig+0x328>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d171      	bne.n	8001be4 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001b00:	f7ff f99a 	bl	8000e38 <HAL_RCC_GetPCLK2Freq>
 8001b04:	4602      	mov	r2, r0
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	009a      	lsls	r2, r3, #2
 8001b0e:	441a      	add	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1a:	4a31      	ldr	r2, [pc, #196]	; (8001be0 <UART_SetConfig+0x32c>)
 8001b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b20:	095b      	lsrs	r3, r3, #5
 8001b22:	011c      	lsls	r4, r3, #4
 8001b24:	f7ff f988 	bl	8000e38 <HAL_RCC_GetPCLK2Freq>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	009a      	lsls	r2, r3, #2
 8001b32:	441a      	add	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	fbb2 f5f3 	udiv	r5, r2, r3
 8001b3e:	f7ff f97b 	bl	8000e38 <HAL_RCC_GetPCLK2Freq>
 8001b42:	4602      	mov	r2, r0
 8001b44:	4613      	mov	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	009a      	lsls	r2, r3, #2
 8001b4c:	441a      	add	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b58:	4a21      	ldr	r2, [pc, #132]	; (8001be0 <UART_SetConfig+0x32c>)
 8001b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5e:	095b      	lsrs	r3, r3, #5
 8001b60:	2264      	movs	r2, #100	; 0x64
 8001b62:	fb02 f303 	mul.w	r3, r2, r3
 8001b66:	1aeb      	subs	r3, r5, r3
 8001b68:	011b      	lsls	r3, r3, #4
 8001b6a:	3332      	adds	r3, #50	; 0x32
 8001b6c:	4a1c      	ldr	r2, [pc, #112]	; (8001be0 <UART_SetConfig+0x32c>)
 8001b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b72:	095b      	lsrs	r3, r3, #5
 8001b74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b78:	441c      	add	r4, r3
 8001b7a:	f7ff f95d 	bl	8000e38 <HAL_RCC_GetPCLK2Freq>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	009a      	lsls	r2, r3, #2
 8001b88:	441a      	add	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	fbb2 f5f3 	udiv	r5, r2, r3
 8001b94:	f7ff f950 	bl	8000e38 <HAL_RCC_GetPCLK2Freq>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	009a      	lsls	r2, r3, #2
 8001ba2:	441a      	add	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bae:	4a0c      	ldr	r2, [pc, #48]	; (8001be0 <UART_SetConfig+0x32c>)
 8001bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb4:	095b      	lsrs	r3, r3, #5
 8001bb6:	2264      	movs	r2, #100	; 0x64
 8001bb8:	fb02 f303 	mul.w	r3, r2, r3
 8001bbc:	1aeb      	subs	r3, r5, r3
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	3332      	adds	r3, #50	; 0x32
 8001bc2:	4a07      	ldr	r2, [pc, #28]	; (8001be0 <UART_SetConfig+0x32c>)
 8001bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc8:	095b      	lsrs	r3, r3, #5
 8001bca:	f003 020f 	and.w	r2, r3, #15
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4422      	add	r2, r4
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	e071      	b.n	8001cbc <UART_SetConfig+0x408>
 8001bd8:	40011000 	.word	0x40011000
 8001bdc:	40011400 	.word	0x40011400
 8001be0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001be4:	f7ff f914 	bl	8000e10 <HAL_RCC_GetPCLK1Freq>
 8001be8:	4602      	mov	r2, r0
 8001bea:	4613      	mov	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	009a      	lsls	r2, r3, #2
 8001bf2:	441a      	add	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfe:	4a31      	ldr	r2, [pc, #196]	; (8001cc4 <UART_SetConfig+0x410>)
 8001c00:	fba2 2303 	umull	r2, r3, r2, r3
 8001c04:	095b      	lsrs	r3, r3, #5
 8001c06:	011c      	lsls	r4, r3, #4
 8001c08:	f7ff f902 	bl	8000e10 <HAL_RCC_GetPCLK1Freq>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	009a      	lsls	r2, r3, #2
 8001c16:	441a      	add	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	fbb2 f5f3 	udiv	r5, r2, r3
 8001c22:	f7ff f8f5 	bl	8000e10 <HAL_RCC_GetPCLK1Freq>
 8001c26:	4602      	mov	r2, r0
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	009a      	lsls	r2, r3, #2
 8001c30:	441a      	add	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3c:	4a21      	ldr	r2, [pc, #132]	; (8001cc4 <UART_SetConfig+0x410>)
 8001c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c42:	095b      	lsrs	r3, r3, #5
 8001c44:	2264      	movs	r2, #100	; 0x64
 8001c46:	fb02 f303 	mul.w	r3, r2, r3
 8001c4a:	1aeb      	subs	r3, r5, r3
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	3332      	adds	r3, #50	; 0x32
 8001c50:	4a1c      	ldr	r2, [pc, #112]	; (8001cc4 <UART_SetConfig+0x410>)
 8001c52:	fba2 2303 	umull	r2, r3, r2, r3
 8001c56:	095b      	lsrs	r3, r3, #5
 8001c58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c5c:	441c      	add	r4, r3
 8001c5e:	f7ff f8d7 	bl	8000e10 <HAL_RCC_GetPCLK1Freq>
 8001c62:	4602      	mov	r2, r0
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	009a      	lsls	r2, r3, #2
 8001c6c:	441a      	add	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	fbb2 f5f3 	udiv	r5, r2, r3
 8001c78:	f7ff f8ca 	bl	8000e10 <HAL_RCC_GetPCLK1Freq>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	4613      	mov	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	009a      	lsls	r2, r3, #2
 8001c86:	441a      	add	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c92:	4a0c      	ldr	r2, [pc, #48]	; (8001cc4 <UART_SetConfig+0x410>)
 8001c94:	fba2 2303 	umull	r2, r3, r2, r3
 8001c98:	095b      	lsrs	r3, r3, #5
 8001c9a:	2264      	movs	r2, #100	; 0x64
 8001c9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ca0:	1aeb      	subs	r3, r5, r3
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	3332      	adds	r3, #50	; 0x32
 8001ca6:	4a07      	ldr	r2, [pc, #28]	; (8001cc4 <UART_SetConfig+0x410>)
 8001ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cac:	095b      	lsrs	r3, r3, #5
 8001cae:	f003 020f 	and.w	r2, r3, #15
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4422      	add	r2, r4
 8001cb8:	609a      	str	r2, [r3, #8]
}
 8001cba:	e7ff      	b.n	8001cbc <UART_SetConfig+0x408>
 8001cbc:	bf00      	nop
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc4:	51eb851f 	.word	0x51eb851f

08001cc8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001ccc:	f7fe fc78 	bl	80005c0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001cd0:	f000 f850 	bl	8001d74 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001cd4:	f000 f924 	bl	8001f20 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001cd8:	f000 f8ce 	bl	8001e78 <MX_USART2_UART_Init>
	MX_CRC_Init();
 8001cdc:	f000 f8b8 	bl	8001e50 <MX_CRC_Init>
	MX_USART3_UART_Init();
 8001ce0:	f000 f8f4 	bl	8001ecc <MX_USART3_UART_Init>

	/* USER CODE BEGIN 2 */

	printmsg("BL_DEBUG_MSG:Hello from Bootloader\n\r");
 8001ce4:	480c      	ldr	r0, [pc, #48]	; (8001d18 <main+0x50>)
 8001ce6:	f000 f81f 	bl	8001d28 <printmsg>

	/* Check whether the on board button is pressed or not */
	if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8001cea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cee:	480b      	ldr	r0, [pc, #44]	; (8001d1c <main+0x54>)
 8001cf0:	f7fe ff6e 	bl	8000bd0 <HAL_GPIO_ReadPin>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d105      	bne.n	8001d06 <main+0x3e>
	{
		printmsg("BL_DEBUG_MSG:Button is pressed .... Entering to BL mode\n\r");
 8001cfa:	4809      	ldr	r0, [pc, #36]	; (8001d20 <main+0x58>)
 8001cfc:	f000 f814 	bl	8001d28 <printmsg>
		Bootloader_UART_Read_Data();
 8001d00:	f000 f97e 	bl	8002000 <Bootloader_UART_Read_Data>
 8001d04:	e004      	b.n	8001d10 <main+0x48>
	}
	else
	{
		printmsg("BL_DEBUG_MSG:Button is not pressed .... Executing user application\n\r");
 8001d06:	4807      	ldr	r0, [pc, #28]	; (8001d24 <main+0x5c>)
 8001d08:	f000 f80e 	bl	8001d28 <printmsg>
		Bootloader_Jump_To_User_App();
 8001d0c:	f000 f980 	bl	8002010 <Bootloader_Jump_To_User_App>
 8001d10:	2300      	movs	r3, #0
	}
	/* USER CODE END 2 */
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	08002c0c 	.word	0x08002c0c
 8001d1c:	40020800 	.word	0x40020800
 8001d20:	08002c34 	.word	0x08002c34
 8001d24:	08002c70 	.word	0x08002c70

08001d28 <printmsg>:
/**
 * @brief Print formatted string to console over UART
 * @retval None
 */
void printmsg(char *format, ...)
{
 8001d28:	b40f      	push	{r0, r1, r2, r3}
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b096      	sub	sp, #88	; 0x58
 8001d2e:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN
	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 8001d30:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d34:	607b      	str	r3, [r7, #4]
	vsprintf(str, format, args);
 8001d36:	f107 0308 	add.w	r3, r7, #8
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 fb68 	bl	8002414 <vsiprintf>
	HAL_UART_Transmit(D_UART, (uint8_t *) str, strlen(str), HAL_MAX_DELAY);
 8001d44:	f107 0308 	add.w	r3, r7, #8
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fa61 	bl	8000210 <strlen>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	f107 0108 	add.w	r1, r7, #8
 8001d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d5a:	4805      	ldr	r0, [pc, #20]	; (8001d70 <printmsg+0x48>)
 8001d5c:	f7ff fcc7 	bl	80016ee <HAL_UART_Transmit>
	va_end(args);
#endif
}
 8001d60:	bf00      	nop
 8001d62:	3758      	adds	r7, #88	; 0x58
 8001d64:	46bd      	mov	sp, r7
 8001d66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d6a:	b004      	add	sp, #16
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	2000009c 	.word	0x2000009c

08001d74 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b094      	sub	sp, #80	; 0x50
 8001d78:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8001d7a:	f107 031c 	add.w	r3, r7, #28
 8001d7e:	2234      	movs	r2, #52	; 0x34
 8001d80:	2100      	movs	r1, #0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 fb28 	bl	80023d8 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8001d88:	f107 0308 	add.w	r3, r7, #8
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 8001d98:	2300      	movs	r3, #0
 8001d9a:	607b      	str	r3, [r7, #4]
 8001d9c:	4b2a      	ldr	r3, [pc, #168]	; (8001e48 <SystemClock_Config+0xd4>)
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	4a29      	ldr	r2, [pc, #164]	; (8001e48 <SystemClock_Config+0xd4>)
 8001da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da6:	6413      	str	r3, [r2, #64]	; 0x40
 8001da8:	4b27      	ldr	r3, [pc, #156]	; (8001e48 <SystemClock_Config+0xd4>)
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db0:	607b      	str	r3, [r7, #4]
 8001db2:	687b      	ldr	r3, [r7, #4]
	;
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001db4:	2300      	movs	r3, #0
 8001db6:	603b      	str	r3, [r7, #0]
 8001db8:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <SystemClock_Config+0xd8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001dc0:	4a22      	ldr	r2, [pc, #136]	; (8001e4c <SystemClock_Config+0xd8>)
 8001dc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <SystemClock_Config+0xd8>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dd0:	603b      	str	r3, [r7, #0]
 8001dd2:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ddc:	2310      	movs	r3, #16
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001de0:	2302      	movs	r3, #2
 8001de2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001de4:	2300      	movs	r3, #0
 8001de6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001de8:	2310      	movs	r3, #16
 8001dea:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001dec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001df0:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001df2:	2304      	movs	r3, #4
 8001df4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001df6:	2302      	movs	r3, #2
 8001df8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dfe:	f107 031c 	add.w	r3, r7, #28
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff f9cc 	bl	80011a0 <HAL_RCC_OscConfig>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8001e0e:	f000 f92f 	bl	8002070 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001e12:	230f      	movs	r3, #15
 8001e14:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e16:	2302      	movs	r3, #2
 8001e18:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e22:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e28:	f107 0308 	add.w	r3, r7, #8
 8001e2c:	2102      	movs	r1, #2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe ff00 	bl	8000c34 <HAL_RCC_ClockConfig>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <SystemClock_Config+0xca>
	{
		Error_Handler();
 8001e3a:	f000 f919 	bl	8002070 <Error_Handler>
	}
}
 8001e3e:	bf00      	nop
 8001e40:	3750      	adds	r7, #80	; 0x50
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40007000 	.word	0x40007000

08001e50 <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <MX_CRC_Init+0x20>)
 8001e56:	4a07      	ldr	r2, [pc, #28]	; (8001e74 <MX_CRC_Init+0x24>)
 8001e58:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001e5a:	4805      	ldr	r0, [pc, #20]	; (8001e70 <MX_CRC_Init+0x20>)
 8001e5c:	f7fe fd07 	bl	800086e <HAL_CRC_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_CRC_Init+0x1a>
	{
		Error_Handler();
 8001e66:	f000 f903 	bl	8002070 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	200000dc 	.word	0x200000dc
 8001e74:	40023000 	.word	0x40023000

08001e78 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <MX_USART2_UART_Init+0x4c>)
 8001e7e:	4a12      	ldr	r2, [pc, #72]	; (8001ec8 <MX_USART2_UART_Init+0x50>)
 8001e80:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <MX_USART2_UART_Init+0x4c>)
 8001e84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e88:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <MX_USART2_UART_Init+0x4c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <MX_USART2_UART_Init+0x4c>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001e96:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <MX_USART2_UART_Init+0x4c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001e9c:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <MX_USART2_UART_Init+0x4c>)
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <MX_USART2_UART_Init+0x4c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <MX_USART2_UART_Init+0x4c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eae:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <MX_USART2_UART_Init+0x4c>)
 8001eb0:	f7ff fbd0 	bl	8001654 <HAL_UART_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8001eba:	f000 f8d9 	bl	8002070 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200000e4 	.word	0x200000e4
 8001ec8:	40004400 	.word	0x40004400

08001ecc <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <MX_USART3_UART_Init+0x4c>)
 8001ed2:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <MX_USART3_UART_Init+0x50>)
 8001ed4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <MX_USART3_UART_Init+0x4c>)
 8001ed8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001edc:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <MX_USART3_UART_Init+0x4c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <MX_USART3_UART_Init+0x4c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001eea:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <MX_USART3_UART_Init+0x4c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001ef0:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <MX_USART3_UART_Init+0x4c>)
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <MX_USART3_UART_Init+0x4c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <MX_USART3_UART_Init+0x4c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f02:	4805      	ldr	r0, [pc, #20]	; (8001f18 <MX_USART3_UART_Init+0x4c>)
 8001f04:	f7ff fba6 	bl	8001654 <HAL_UART_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8001f0e:	f000 f8af 	bl	8002070 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	2000009c 	.word	0x2000009c
 8001f1c:	40004800 	.word	0x40004800

08001f20 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	60da      	str	r2, [r3, #12]
 8001f34:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	4b2d      	ldr	r3, [pc, #180]	; (8001ff0 <MX_GPIO_Init+0xd0>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a2c      	ldr	r2, [pc, #176]	; (8001ff0 <MX_GPIO_Init+0xd0>)
 8001f40:	f043 0304 	orr.w	r3, r3, #4
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b2a      	ldr	r3, [pc, #168]	; (8001ff0 <MX_GPIO_Init+0xd0>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	693b      	ldr	r3, [r7, #16]
	;
	__HAL_RCC_GPIOH_CLK_ENABLE()
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	4b26      	ldr	r3, [pc, #152]	; (8001ff0 <MX_GPIO_Init+0xd0>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a25      	ldr	r2, [pc, #148]	; (8001ff0 <MX_GPIO_Init+0xd0>)
 8001f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b23      	ldr	r3, [pc, #140]	; (8001ff0 <MX_GPIO_Init+0xd0>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	4b1f      	ldr	r3, [pc, #124]	; (8001ff0 <MX_GPIO_Init+0xd0>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	4a1e      	ldr	r2, [pc, #120]	; (8001ff0 <MX_GPIO_Init+0xd0>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7e:	4b1c      	ldr	r3, [pc, #112]	; (8001ff0 <MX_GPIO_Init+0xd0>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	607b      	str	r3, [r7, #4]
 8001f8e:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <MX_GPIO_Init+0xd0>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	4a17      	ldr	r2, [pc, #92]	; (8001ff0 <MX_GPIO_Init+0xd0>)
 8001f94:	f043 0302 	orr.w	r3, r3, #2
 8001f98:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9a:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <MX_GPIO_Init+0xd0>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	607b      	str	r3, [r7, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2120      	movs	r1, #32
 8001faa:	4812      	ldr	r0, [pc, #72]	; (8001ff4 <MX_GPIO_Init+0xd4>)
 8001fac:	f7fe fe28 	bl	8000c00 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001fb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fb4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <MX_GPIO_Init+0xd8>)
 8001fb8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001fbe:	f107 0314 	add.w	r3, r7, #20
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	480d      	ldr	r0, [pc, #52]	; (8001ffc <MX_GPIO_Init+0xdc>)
 8001fc6:	f7fe fc71 	bl	80008ac <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001fca:	2320      	movs	r3, #32
 8001fcc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4804      	ldr	r0, [pc, #16]	; (8001ff4 <MX_GPIO_Init+0xd4>)
 8001fe2:	f7fe fc63 	bl	80008ac <HAL_GPIO_Init>

}
 8001fe6:	bf00      	nop
 8001fe8:	3728      	adds	r7, #40	; 0x28
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40020000 	.word	0x40020000
 8001ff8:	10210000 	.word	0x10210000
 8001ffc:	40020800 	.word	0x40020800

08002000 <Bootloader_UART_Read_Data>:

/* USER CODE BEGIN 4 */

void Bootloader_UART_Read_Data(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0

}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <Bootloader_Jump_To_User_App>:

void Bootloader_Jump_To_User_App(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
	// a function pointer to hold the address of the reset handler of the user app
	void (*app_reset_handler)(void);

	printmsg("BL_DEBUG_MSG:Handing control over to user application\n\r");
 8002016:	4810      	ldr	r0, [pc, #64]	; (8002058 <Bootloader_Jump_To_User_App+0x48>)
 8002018:	f7ff fe86 	bl	8001d28 <printmsg>

	// configure the MSP by reading the value from the base address of the user app
	uint32_t msp_value = *(volatile uint32_t *) USER_APPLICATION_BASE_ADDRESS;
 800201c:	4b0f      	ldr	r3, [pc, #60]	; (800205c <Bootloader_Jump_To_User_App+0x4c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	60fb      	str	r3, [r7, #12]
	printmsg("BL_DEBUG_MSG:MSP value : %#x\n\r", msp_value);
 8002022:	68f9      	ldr	r1, [r7, #12]
 8002024:	480e      	ldr	r0, [pc, #56]	; (8002060 <Bootloader_Jump_To_User_App+0x50>)
 8002026:	f7ff fe7f 	bl	8001d28 <printmsg>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	f383 8808 	msr	MSP, r3
	// SCB->VTOR = FLASH_SECTOR1_BASE_ADDRESS; // Vector Table Offset Register

	/* fetch the reset handler address of the user application
	 * from the location USER_APPLICATION_BASE_ADDRESS+4
	 */
	uint32_t resethandler_address = *(volatile uint32_t *) (USER_APPLICATION_BASE_ADDRESS + 4);
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <Bootloader_Jump_To_User_App+0x54>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	60bb      	str	r3, [r7, #8]

	app_reset_handler = (void*) resethandler_address;
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	607b      	str	r3, [r7, #4]

	printmsg("BL_DEBUG_MSG:App reset handler addr : %#x\n\r", app_reset_handler);
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4809      	ldr	r0, [pc, #36]	; (8002068 <Bootloader_Jump_To_User_App+0x58>)
 8002042:	f7ff fe71 	bl	8001d28 <printmsg>

	// jump to reset handler of the user application
	printmsg("BL_DEBUG_MSG:Starting user application\n\r");
 8002046:	4809      	ldr	r0, [pc, #36]	; (800206c <Bootloader_Jump_To_User_App+0x5c>)
 8002048:	f7ff fe6e 	bl	8001d28 <printmsg>
	app_reset_handler();
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4798      	blx	r3
}
 8002050:	bf00      	nop
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	08002cb8 	.word	0x08002cb8
 800205c:	08008000 	.word	0x08008000
 8002060:	08002cf0 	.word	0x08002cf0
 8002064:	08008004 	.word	0x08008004
 8002068:	08002d10 	.word	0x08002d10
 800206c:	08002d3c 	.word	0x08002d3c

08002070 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	607b      	str	r3, [r7, #4]
 800208a:	4b10      	ldr	r3, [pc, #64]	; (80020cc <HAL_MspInit+0x4c>)
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	4a0f      	ldr	r2, [pc, #60]	; (80020cc <HAL_MspInit+0x4c>)
 8002090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002094:	6453      	str	r3, [r2, #68]	; 0x44
 8002096:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <HAL_MspInit+0x4c>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800209e:	607b      	str	r3, [r7, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	603b      	str	r3, [r7, #0]
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <HAL_MspInit+0x4c>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	4a08      	ldr	r2, [pc, #32]	; (80020cc <HAL_MspInit+0x4c>)
 80020ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b0:	6413      	str	r3, [r2, #64]	; 0x40
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_MspInit+0x4c>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ba:	603b      	str	r3, [r7, #0]
 80020bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80020be:	2007      	movs	r0, #7
 80020c0:	f7fe fba2 	bl	8000808 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40023800 	.word	0x40023800

080020d0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a0b      	ldr	r2, [pc, #44]	; (800210c <HAL_CRC_MspInit+0x3c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d10d      	bne.n	80020fe <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <HAL_CRC_MspInit+0x40>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a09      	ldr	r2, [pc, #36]	; (8002110 <HAL_CRC_MspInit+0x40>)
 80020ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b07      	ldr	r3, [pc, #28]	; (8002110 <HAL_CRC_MspInit+0x40>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80020fe:	bf00      	nop
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	40023000 	.word	0x40023000
 8002110:	40023800 	.word	0x40023800

08002114 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08c      	sub	sp, #48	; 0x30
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 031c 	add.w	r3, r7, #28
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a32      	ldr	r2, [pc, #200]	; (80021fc <HAL_UART_MspInit+0xe8>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d12c      	bne.n	8002190 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	61bb      	str	r3, [r7, #24]
 800213a:	4b31      	ldr	r3, [pc, #196]	; (8002200 <HAL_UART_MspInit+0xec>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	4a30      	ldr	r2, [pc, #192]	; (8002200 <HAL_UART_MspInit+0xec>)
 8002140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002144:	6413      	str	r3, [r2, #64]	; 0x40
 8002146:	4b2e      	ldr	r3, [pc, #184]	; (8002200 <HAL_UART_MspInit+0xec>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	4b2a      	ldr	r3, [pc, #168]	; (8002200 <HAL_UART_MspInit+0xec>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a29      	ldr	r2, [pc, #164]	; (8002200 <HAL_UART_MspInit+0xec>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b27      	ldr	r3, [pc, #156]	; (8002200 <HAL_UART_MspInit+0xec>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800216e:	230c      	movs	r3, #12
 8002170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002172:	2302      	movs	r3, #2
 8002174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002176:	2301      	movs	r3, #1
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800217a:	2303      	movs	r3, #3
 800217c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800217e:	2307      	movs	r3, #7
 8002180:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002182:	f107 031c 	add.w	r3, r7, #28
 8002186:	4619      	mov	r1, r3
 8002188:	481e      	ldr	r0, [pc, #120]	; (8002204 <HAL_UART_MspInit+0xf0>)
 800218a:	f7fe fb8f 	bl	80008ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800218e:	e031      	b.n	80021f4 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a1c      	ldr	r2, [pc, #112]	; (8002208 <HAL_UART_MspInit+0xf4>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d12c      	bne.n	80021f4 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	4b18      	ldr	r3, [pc, #96]	; (8002200 <HAL_UART_MspInit+0xec>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	4a17      	ldr	r2, [pc, #92]	; (8002200 <HAL_UART_MspInit+0xec>)
 80021a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021a8:	6413      	str	r3, [r2, #64]	; 0x40
 80021aa:	4b15      	ldr	r3, [pc, #84]	; (8002200 <HAL_UART_MspInit+0xec>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021b2:	613b      	str	r3, [r7, #16]
 80021b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	4b11      	ldr	r3, [pc, #68]	; (8002200 <HAL_UART_MspInit+0xec>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4a10      	ldr	r2, [pc, #64]	; (8002200 <HAL_UART_MspInit+0xec>)
 80021c0:	f043 0304 	orr.w	r3, r3, #4
 80021c4:	6313      	str	r3, [r2, #48]	; 0x30
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <HAL_UART_MspInit+0xec>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d8:	2302      	movs	r3, #2
 80021da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021dc:	2301      	movs	r3, #1
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e0:	2303      	movs	r3, #3
 80021e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021e4:	2307      	movs	r3, #7
 80021e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e8:	f107 031c 	add.w	r3, r7, #28
 80021ec:	4619      	mov	r1, r3
 80021ee:	4807      	ldr	r0, [pc, #28]	; (800220c <HAL_UART_MspInit+0xf8>)
 80021f0:	f7fe fb5c 	bl	80008ac <HAL_GPIO_Init>
}
 80021f4:	bf00      	nop
 80021f6:	3730      	adds	r7, #48	; 0x30
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40004400 	.word	0x40004400
 8002200:	40023800 	.word	0x40023800
 8002204:	40020000 	.word	0x40020000
 8002208:	40004800 	.word	0x40004800
 800220c:	40020800 	.word	0x40020800

08002210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002222:	e7fe      	b.n	8002222 <HardFault_Handler+0x4>

08002224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002228:	e7fe      	b.n	8002228 <MemManage_Handler+0x4>

0800222a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800222e:	e7fe      	b.n	800222e <BusFault_Handler+0x4>

08002230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <UsageFault_Handler+0x4>

08002236 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002264:	f7fe f9fe 	bl	8000664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}

0800226c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <_sbrk+0x50>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d102      	bne.n	8002282 <_sbrk+0x16>
		heap_end = &end;
 800227c:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <_sbrk+0x50>)
 800227e:	4a10      	ldr	r2, [pc, #64]	; (80022c0 <_sbrk+0x54>)
 8002280:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002282:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <_sbrk+0x50>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002288:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <_sbrk+0x50>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4413      	add	r3, r2
 8002290:	466a      	mov	r2, sp
 8002292:	4293      	cmp	r3, r2
 8002294:	d907      	bls.n	80022a6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002296:	f000 f875 	bl	8002384 <__errno>
 800229a:	4602      	mov	r2, r0
 800229c:	230c      	movs	r3, #12
 800229e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80022a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022a4:	e006      	b.n	80022b4 <_sbrk+0x48>
	}

	heap_end += incr;
 80022a6:	4b05      	ldr	r3, [pc, #20]	; (80022bc <_sbrk+0x50>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	4a03      	ldr	r2, [pc, #12]	; (80022bc <_sbrk+0x50>)
 80022b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80022b2:	68fb      	ldr	r3, [r7, #12]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	2000008c 	.word	0x2000008c
 80022c0:	20000128 	.word	0x20000128

080022c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022c8:	4b16      	ldr	r3, [pc, #88]	; (8002324 <SystemInit+0x60>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ce:	4a15      	ldr	r2, [pc, #84]	; (8002324 <SystemInit+0x60>)
 80022d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80022d8:	4b13      	ldr	r3, [pc, #76]	; (8002328 <SystemInit+0x64>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a12      	ldr	r2, [pc, #72]	; (8002328 <SystemInit+0x64>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80022e4:	4b10      	ldr	r3, [pc, #64]	; (8002328 <SystemInit+0x64>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80022ea:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <SystemInit+0x64>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a0e      	ldr	r2, [pc, #56]	; (8002328 <SystemInit+0x64>)
 80022f0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80022f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80022fa:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <SystemInit+0x64>)
 80022fc:	4a0b      	ldr	r2, [pc, #44]	; (800232c <SystemInit+0x68>)
 80022fe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002300:	4b09      	ldr	r3, [pc, #36]	; (8002328 <SystemInit+0x64>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a08      	ldr	r2, [pc, #32]	; (8002328 <SystemInit+0x64>)
 8002306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800230a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800230c:	4b06      	ldr	r3, [pc, #24]	; (8002328 <SystemInit+0x64>)
 800230e:	2200      	movs	r2, #0
 8002310:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002312:	4b04      	ldr	r3, [pc, #16]	; (8002324 <SystemInit+0x60>)
 8002314:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002318:	609a      	str	r2, [r3, #8]
#endif
}
 800231a:	bf00      	nop
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000ed00 	.word	0xe000ed00
 8002328:	40023800 	.word	0x40023800
 800232c:	24003010 	.word	0x24003010

08002330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002330:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002368 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002334:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002336:	e003      	b.n	8002340 <LoopCopyDataInit>

08002338 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800233a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800233c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800233e:	3104      	adds	r1, #4

08002340 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002340:	480b      	ldr	r0, [pc, #44]	; (8002370 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002342:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002344:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002346:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002348:	d3f6      	bcc.n	8002338 <CopyDataInit>
  ldr  r2, =_sbss
 800234a:	4a0b      	ldr	r2, [pc, #44]	; (8002378 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800234c:	e002      	b.n	8002354 <LoopFillZerobss>

0800234e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800234e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002350:	f842 3b04 	str.w	r3, [r2], #4

08002354 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002356:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002358:	d3f9      	bcc.n	800234e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800235a:	f7ff ffb3 	bl	80022c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800235e:	f000 f817 	bl	8002390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002362:	f7ff fcb1 	bl	8001cc8 <main>
  bx  lr    
 8002366:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002368:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800236c:	08002dc4 	.word	0x08002dc4
  ldr  r0, =_sdata
 8002370:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002374:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8002378:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 800237c:	20000128 	.word	0x20000128

08002380 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002380:	e7fe      	b.n	8002380 <ADC_IRQHandler>
	...

08002384 <__errno>:
 8002384:	4b01      	ldr	r3, [pc, #4]	; (800238c <__errno+0x8>)
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	2000000c 	.word	0x2000000c

08002390 <__libc_init_array>:
 8002390:	b570      	push	{r4, r5, r6, lr}
 8002392:	4e0d      	ldr	r6, [pc, #52]	; (80023c8 <__libc_init_array+0x38>)
 8002394:	4c0d      	ldr	r4, [pc, #52]	; (80023cc <__libc_init_array+0x3c>)
 8002396:	1ba4      	subs	r4, r4, r6
 8002398:	10a4      	asrs	r4, r4, #2
 800239a:	2500      	movs	r5, #0
 800239c:	42a5      	cmp	r5, r4
 800239e:	d109      	bne.n	80023b4 <__libc_init_array+0x24>
 80023a0:	4e0b      	ldr	r6, [pc, #44]	; (80023d0 <__libc_init_array+0x40>)
 80023a2:	4c0c      	ldr	r4, [pc, #48]	; (80023d4 <__libc_init_array+0x44>)
 80023a4:	f000 fc26 	bl	8002bf4 <_init>
 80023a8:	1ba4      	subs	r4, r4, r6
 80023aa:	10a4      	asrs	r4, r4, #2
 80023ac:	2500      	movs	r5, #0
 80023ae:	42a5      	cmp	r5, r4
 80023b0:	d105      	bne.n	80023be <__libc_init_array+0x2e>
 80023b2:	bd70      	pop	{r4, r5, r6, pc}
 80023b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023b8:	4798      	blx	r3
 80023ba:	3501      	adds	r5, #1
 80023bc:	e7ee      	b.n	800239c <__libc_init_array+0xc>
 80023be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023c2:	4798      	blx	r3
 80023c4:	3501      	adds	r5, #1
 80023c6:	e7f2      	b.n	80023ae <__libc_init_array+0x1e>
 80023c8:	08002dbc 	.word	0x08002dbc
 80023cc:	08002dbc 	.word	0x08002dbc
 80023d0:	08002dbc 	.word	0x08002dbc
 80023d4:	08002dc0 	.word	0x08002dc0

080023d8 <memset>:
 80023d8:	4402      	add	r2, r0
 80023da:	4603      	mov	r3, r0
 80023dc:	4293      	cmp	r3, r2
 80023de:	d100      	bne.n	80023e2 <memset+0xa>
 80023e0:	4770      	bx	lr
 80023e2:	f803 1b01 	strb.w	r1, [r3], #1
 80023e6:	e7f9      	b.n	80023dc <memset+0x4>

080023e8 <_vsiprintf_r>:
 80023e8:	b500      	push	{lr}
 80023ea:	b09b      	sub	sp, #108	; 0x6c
 80023ec:	9100      	str	r1, [sp, #0]
 80023ee:	9104      	str	r1, [sp, #16]
 80023f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80023f4:	9105      	str	r1, [sp, #20]
 80023f6:	9102      	str	r1, [sp, #8]
 80023f8:	4905      	ldr	r1, [pc, #20]	; (8002410 <_vsiprintf_r+0x28>)
 80023fa:	9103      	str	r1, [sp, #12]
 80023fc:	4669      	mov	r1, sp
 80023fe:	f000 f86d 	bl	80024dc <_svfiprintf_r>
 8002402:	9b00      	ldr	r3, [sp, #0]
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]
 8002408:	b01b      	add	sp, #108	; 0x6c
 800240a:	f85d fb04 	ldr.w	pc, [sp], #4
 800240e:	bf00      	nop
 8002410:	ffff0208 	.word	0xffff0208

08002414 <vsiprintf>:
 8002414:	4613      	mov	r3, r2
 8002416:	460a      	mov	r2, r1
 8002418:	4601      	mov	r1, r0
 800241a:	4802      	ldr	r0, [pc, #8]	; (8002424 <vsiprintf+0x10>)
 800241c:	6800      	ldr	r0, [r0, #0]
 800241e:	f7ff bfe3 	b.w	80023e8 <_vsiprintf_r>
 8002422:	bf00      	nop
 8002424:	2000000c 	.word	0x2000000c

08002428 <__ssputs_r>:
 8002428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800242c:	688e      	ldr	r6, [r1, #8]
 800242e:	429e      	cmp	r6, r3
 8002430:	4682      	mov	sl, r0
 8002432:	460c      	mov	r4, r1
 8002434:	4690      	mov	r8, r2
 8002436:	4699      	mov	r9, r3
 8002438:	d837      	bhi.n	80024aa <__ssputs_r+0x82>
 800243a:	898a      	ldrh	r2, [r1, #12]
 800243c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002440:	d031      	beq.n	80024a6 <__ssputs_r+0x7e>
 8002442:	6825      	ldr	r5, [r4, #0]
 8002444:	6909      	ldr	r1, [r1, #16]
 8002446:	1a6f      	subs	r7, r5, r1
 8002448:	6965      	ldr	r5, [r4, #20]
 800244a:	2302      	movs	r3, #2
 800244c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002450:	fb95 f5f3 	sdiv	r5, r5, r3
 8002454:	f109 0301 	add.w	r3, r9, #1
 8002458:	443b      	add	r3, r7
 800245a:	429d      	cmp	r5, r3
 800245c:	bf38      	it	cc
 800245e:	461d      	movcc	r5, r3
 8002460:	0553      	lsls	r3, r2, #21
 8002462:	d530      	bpl.n	80024c6 <__ssputs_r+0x9e>
 8002464:	4629      	mov	r1, r5
 8002466:	f000 fb2b 	bl	8002ac0 <_malloc_r>
 800246a:	4606      	mov	r6, r0
 800246c:	b950      	cbnz	r0, 8002484 <__ssputs_r+0x5c>
 800246e:	230c      	movs	r3, #12
 8002470:	f8ca 3000 	str.w	r3, [sl]
 8002474:	89a3      	ldrh	r3, [r4, #12]
 8002476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800247a:	81a3      	strh	r3, [r4, #12]
 800247c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002484:	463a      	mov	r2, r7
 8002486:	6921      	ldr	r1, [r4, #16]
 8002488:	f000 faa8 	bl	80029dc <memcpy>
 800248c:	89a3      	ldrh	r3, [r4, #12]
 800248e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002496:	81a3      	strh	r3, [r4, #12]
 8002498:	6126      	str	r6, [r4, #16]
 800249a:	6165      	str	r5, [r4, #20]
 800249c:	443e      	add	r6, r7
 800249e:	1bed      	subs	r5, r5, r7
 80024a0:	6026      	str	r6, [r4, #0]
 80024a2:	60a5      	str	r5, [r4, #8]
 80024a4:	464e      	mov	r6, r9
 80024a6:	454e      	cmp	r6, r9
 80024a8:	d900      	bls.n	80024ac <__ssputs_r+0x84>
 80024aa:	464e      	mov	r6, r9
 80024ac:	4632      	mov	r2, r6
 80024ae:	4641      	mov	r1, r8
 80024b0:	6820      	ldr	r0, [r4, #0]
 80024b2:	f000 fa9e 	bl	80029f2 <memmove>
 80024b6:	68a3      	ldr	r3, [r4, #8]
 80024b8:	1b9b      	subs	r3, r3, r6
 80024ba:	60a3      	str	r3, [r4, #8]
 80024bc:	6823      	ldr	r3, [r4, #0]
 80024be:	441e      	add	r6, r3
 80024c0:	6026      	str	r6, [r4, #0]
 80024c2:	2000      	movs	r0, #0
 80024c4:	e7dc      	b.n	8002480 <__ssputs_r+0x58>
 80024c6:	462a      	mov	r2, r5
 80024c8:	f000 fb54 	bl	8002b74 <_realloc_r>
 80024cc:	4606      	mov	r6, r0
 80024ce:	2800      	cmp	r0, #0
 80024d0:	d1e2      	bne.n	8002498 <__ssputs_r+0x70>
 80024d2:	6921      	ldr	r1, [r4, #16]
 80024d4:	4650      	mov	r0, sl
 80024d6:	f000 faa5 	bl	8002a24 <_free_r>
 80024da:	e7c8      	b.n	800246e <__ssputs_r+0x46>

080024dc <_svfiprintf_r>:
 80024dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024e0:	461d      	mov	r5, r3
 80024e2:	898b      	ldrh	r3, [r1, #12]
 80024e4:	061f      	lsls	r7, r3, #24
 80024e6:	b09d      	sub	sp, #116	; 0x74
 80024e8:	4680      	mov	r8, r0
 80024ea:	460c      	mov	r4, r1
 80024ec:	4616      	mov	r6, r2
 80024ee:	d50f      	bpl.n	8002510 <_svfiprintf_r+0x34>
 80024f0:	690b      	ldr	r3, [r1, #16]
 80024f2:	b96b      	cbnz	r3, 8002510 <_svfiprintf_r+0x34>
 80024f4:	2140      	movs	r1, #64	; 0x40
 80024f6:	f000 fae3 	bl	8002ac0 <_malloc_r>
 80024fa:	6020      	str	r0, [r4, #0]
 80024fc:	6120      	str	r0, [r4, #16]
 80024fe:	b928      	cbnz	r0, 800250c <_svfiprintf_r+0x30>
 8002500:	230c      	movs	r3, #12
 8002502:	f8c8 3000 	str.w	r3, [r8]
 8002506:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800250a:	e0c8      	b.n	800269e <_svfiprintf_r+0x1c2>
 800250c:	2340      	movs	r3, #64	; 0x40
 800250e:	6163      	str	r3, [r4, #20]
 8002510:	2300      	movs	r3, #0
 8002512:	9309      	str	r3, [sp, #36]	; 0x24
 8002514:	2320      	movs	r3, #32
 8002516:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800251a:	2330      	movs	r3, #48	; 0x30
 800251c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002520:	9503      	str	r5, [sp, #12]
 8002522:	f04f 0b01 	mov.w	fp, #1
 8002526:	4637      	mov	r7, r6
 8002528:	463d      	mov	r5, r7
 800252a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800252e:	b10b      	cbz	r3, 8002534 <_svfiprintf_r+0x58>
 8002530:	2b25      	cmp	r3, #37	; 0x25
 8002532:	d13e      	bne.n	80025b2 <_svfiprintf_r+0xd6>
 8002534:	ebb7 0a06 	subs.w	sl, r7, r6
 8002538:	d00b      	beq.n	8002552 <_svfiprintf_r+0x76>
 800253a:	4653      	mov	r3, sl
 800253c:	4632      	mov	r2, r6
 800253e:	4621      	mov	r1, r4
 8002540:	4640      	mov	r0, r8
 8002542:	f7ff ff71 	bl	8002428 <__ssputs_r>
 8002546:	3001      	adds	r0, #1
 8002548:	f000 80a4 	beq.w	8002694 <_svfiprintf_r+0x1b8>
 800254c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800254e:	4453      	add	r3, sl
 8002550:	9309      	str	r3, [sp, #36]	; 0x24
 8002552:	783b      	ldrb	r3, [r7, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 809d 	beq.w	8002694 <_svfiprintf_r+0x1b8>
 800255a:	2300      	movs	r3, #0
 800255c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002560:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002564:	9304      	str	r3, [sp, #16]
 8002566:	9307      	str	r3, [sp, #28]
 8002568:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800256c:	931a      	str	r3, [sp, #104]	; 0x68
 800256e:	462f      	mov	r7, r5
 8002570:	2205      	movs	r2, #5
 8002572:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002576:	4850      	ldr	r0, [pc, #320]	; (80026b8 <_svfiprintf_r+0x1dc>)
 8002578:	f7fd fe52 	bl	8000220 <memchr>
 800257c:	9b04      	ldr	r3, [sp, #16]
 800257e:	b9d0      	cbnz	r0, 80025b6 <_svfiprintf_r+0xda>
 8002580:	06d9      	lsls	r1, r3, #27
 8002582:	bf44      	itt	mi
 8002584:	2220      	movmi	r2, #32
 8002586:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800258a:	071a      	lsls	r2, r3, #28
 800258c:	bf44      	itt	mi
 800258e:	222b      	movmi	r2, #43	; 0x2b
 8002590:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002594:	782a      	ldrb	r2, [r5, #0]
 8002596:	2a2a      	cmp	r2, #42	; 0x2a
 8002598:	d015      	beq.n	80025c6 <_svfiprintf_r+0xea>
 800259a:	9a07      	ldr	r2, [sp, #28]
 800259c:	462f      	mov	r7, r5
 800259e:	2000      	movs	r0, #0
 80025a0:	250a      	movs	r5, #10
 80025a2:	4639      	mov	r1, r7
 80025a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80025a8:	3b30      	subs	r3, #48	; 0x30
 80025aa:	2b09      	cmp	r3, #9
 80025ac:	d94d      	bls.n	800264a <_svfiprintf_r+0x16e>
 80025ae:	b1b8      	cbz	r0, 80025e0 <_svfiprintf_r+0x104>
 80025b0:	e00f      	b.n	80025d2 <_svfiprintf_r+0xf6>
 80025b2:	462f      	mov	r7, r5
 80025b4:	e7b8      	b.n	8002528 <_svfiprintf_r+0x4c>
 80025b6:	4a40      	ldr	r2, [pc, #256]	; (80026b8 <_svfiprintf_r+0x1dc>)
 80025b8:	1a80      	subs	r0, r0, r2
 80025ba:	fa0b f000 	lsl.w	r0, fp, r0
 80025be:	4318      	orrs	r0, r3
 80025c0:	9004      	str	r0, [sp, #16]
 80025c2:	463d      	mov	r5, r7
 80025c4:	e7d3      	b.n	800256e <_svfiprintf_r+0x92>
 80025c6:	9a03      	ldr	r2, [sp, #12]
 80025c8:	1d11      	adds	r1, r2, #4
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	9103      	str	r1, [sp, #12]
 80025ce:	2a00      	cmp	r2, #0
 80025d0:	db01      	blt.n	80025d6 <_svfiprintf_r+0xfa>
 80025d2:	9207      	str	r2, [sp, #28]
 80025d4:	e004      	b.n	80025e0 <_svfiprintf_r+0x104>
 80025d6:	4252      	negs	r2, r2
 80025d8:	f043 0302 	orr.w	r3, r3, #2
 80025dc:	9207      	str	r2, [sp, #28]
 80025de:	9304      	str	r3, [sp, #16]
 80025e0:	783b      	ldrb	r3, [r7, #0]
 80025e2:	2b2e      	cmp	r3, #46	; 0x2e
 80025e4:	d10c      	bne.n	8002600 <_svfiprintf_r+0x124>
 80025e6:	787b      	ldrb	r3, [r7, #1]
 80025e8:	2b2a      	cmp	r3, #42	; 0x2a
 80025ea:	d133      	bne.n	8002654 <_svfiprintf_r+0x178>
 80025ec:	9b03      	ldr	r3, [sp, #12]
 80025ee:	1d1a      	adds	r2, r3, #4
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	9203      	str	r2, [sp, #12]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	bfb8      	it	lt
 80025f8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80025fc:	3702      	adds	r7, #2
 80025fe:	9305      	str	r3, [sp, #20]
 8002600:	4d2e      	ldr	r5, [pc, #184]	; (80026bc <_svfiprintf_r+0x1e0>)
 8002602:	7839      	ldrb	r1, [r7, #0]
 8002604:	2203      	movs	r2, #3
 8002606:	4628      	mov	r0, r5
 8002608:	f7fd fe0a 	bl	8000220 <memchr>
 800260c:	b138      	cbz	r0, 800261e <_svfiprintf_r+0x142>
 800260e:	2340      	movs	r3, #64	; 0x40
 8002610:	1b40      	subs	r0, r0, r5
 8002612:	fa03 f000 	lsl.w	r0, r3, r0
 8002616:	9b04      	ldr	r3, [sp, #16]
 8002618:	4303      	orrs	r3, r0
 800261a:	3701      	adds	r7, #1
 800261c:	9304      	str	r3, [sp, #16]
 800261e:	7839      	ldrb	r1, [r7, #0]
 8002620:	4827      	ldr	r0, [pc, #156]	; (80026c0 <_svfiprintf_r+0x1e4>)
 8002622:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002626:	2206      	movs	r2, #6
 8002628:	1c7e      	adds	r6, r7, #1
 800262a:	f7fd fdf9 	bl	8000220 <memchr>
 800262e:	2800      	cmp	r0, #0
 8002630:	d038      	beq.n	80026a4 <_svfiprintf_r+0x1c8>
 8002632:	4b24      	ldr	r3, [pc, #144]	; (80026c4 <_svfiprintf_r+0x1e8>)
 8002634:	bb13      	cbnz	r3, 800267c <_svfiprintf_r+0x1a0>
 8002636:	9b03      	ldr	r3, [sp, #12]
 8002638:	3307      	adds	r3, #7
 800263a:	f023 0307 	bic.w	r3, r3, #7
 800263e:	3308      	adds	r3, #8
 8002640:	9303      	str	r3, [sp, #12]
 8002642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002644:	444b      	add	r3, r9
 8002646:	9309      	str	r3, [sp, #36]	; 0x24
 8002648:	e76d      	b.n	8002526 <_svfiprintf_r+0x4a>
 800264a:	fb05 3202 	mla	r2, r5, r2, r3
 800264e:	2001      	movs	r0, #1
 8002650:	460f      	mov	r7, r1
 8002652:	e7a6      	b.n	80025a2 <_svfiprintf_r+0xc6>
 8002654:	2300      	movs	r3, #0
 8002656:	3701      	adds	r7, #1
 8002658:	9305      	str	r3, [sp, #20]
 800265a:	4619      	mov	r1, r3
 800265c:	250a      	movs	r5, #10
 800265e:	4638      	mov	r0, r7
 8002660:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002664:	3a30      	subs	r2, #48	; 0x30
 8002666:	2a09      	cmp	r2, #9
 8002668:	d903      	bls.n	8002672 <_svfiprintf_r+0x196>
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0c8      	beq.n	8002600 <_svfiprintf_r+0x124>
 800266e:	9105      	str	r1, [sp, #20]
 8002670:	e7c6      	b.n	8002600 <_svfiprintf_r+0x124>
 8002672:	fb05 2101 	mla	r1, r5, r1, r2
 8002676:	2301      	movs	r3, #1
 8002678:	4607      	mov	r7, r0
 800267a:	e7f0      	b.n	800265e <_svfiprintf_r+0x182>
 800267c:	ab03      	add	r3, sp, #12
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	4622      	mov	r2, r4
 8002682:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <_svfiprintf_r+0x1ec>)
 8002684:	a904      	add	r1, sp, #16
 8002686:	4640      	mov	r0, r8
 8002688:	f3af 8000 	nop.w
 800268c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002690:	4681      	mov	r9, r0
 8002692:	d1d6      	bne.n	8002642 <_svfiprintf_r+0x166>
 8002694:	89a3      	ldrh	r3, [r4, #12]
 8002696:	065b      	lsls	r3, r3, #25
 8002698:	f53f af35 	bmi.w	8002506 <_svfiprintf_r+0x2a>
 800269c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800269e:	b01d      	add	sp, #116	; 0x74
 80026a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026a4:	ab03      	add	r3, sp, #12
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	4622      	mov	r2, r4
 80026aa:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <_svfiprintf_r+0x1ec>)
 80026ac:	a904      	add	r1, sp, #16
 80026ae:	4640      	mov	r0, r8
 80026b0:	f000 f882 	bl	80027b8 <_printf_i>
 80026b4:	e7ea      	b.n	800268c <_svfiprintf_r+0x1b0>
 80026b6:	bf00      	nop
 80026b8:	08002d80 	.word	0x08002d80
 80026bc:	08002d86 	.word	0x08002d86
 80026c0:	08002d8a 	.word	0x08002d8a
 80026c4:	00000000 	.word	0x00000000
 80026c8:	08002429 	.word	0x08002429

080026cc <_printf_common>:
 80026cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026d0:	4691      	mov	r9, r2
 80026d2:	461f      	mov	r7, r3
 80026d4:	688a      	ldr	r2, [r1, #8]
 80026d6:	690b      	ldr	r3, [r1, #16]
 80026d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80026dc:	4293      	cmp	r3, r2
 80026de:	bfb8      	it	lt
 80026e0:	4613      	movlt	r3, r2
 80026e2:	f8c9 3000 	str.w	r3, [r9]
 80026e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80026ea:	4606      	mov	r6, r0
 80026ec:	460c      	mov	r4, r1
 80026ee:	b112      	cbz	r2, 80026f6 <_printf_common+0x2a>
 80026f0:	3301      	adds	r3, #1
 80026f2:	f8c9 3000 	str.w	r3, [r9]
 80026f6:	6823      	ldr	r3, [r4, #0]
 80026f8:	0699      	lsls	r1, r3, #26
 80026fa:	bf42      	ittt	mi
 80026fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002700:	3302      	addmi	r3, #2
 8002702:	f8c9 3000 	strmi.w	r3, [r9]
 8002706:	6825      	ldr	r5, [r4, #0]
 8002708:	f015 0506 	ands.w	r5, r5, #6
 800270c:	d107      	bne.n	800271e <_printf_common+0x52>
 800270e:	f104 0a19 	add.w	sl, r4, #25
 8002712:	68e3      	ldr	r3, [r4, #12]
 8002714:	f8d9 2000 	ldr.w	r2, [r9]
 8002718:	1a9b      	subs	r3, r3, r2
 800271a:	42ab      	cmp	r3, r5
 800271c:	dc28      	bgt.n	8002770 <_printf_common+0xa4>
 800271e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002722:	6822      	ldr	r2, [r4, #0]
 8002724:	3300      	adds	r3, #0
 8002726:	bf18      	it	ne
 8002728:	2301      	movne	r3, #1
 800272a:	0692      	lsls	r2, r2, #26
 800272c:	d42d      	bmi.n	800278a <_printf_common+0xbe>
 800272e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002732:	4639      	mov	r1, r7
 8002734:	4630      	mov	r0, r6
 8002736:	47c0      	blx	r8
 8002738:	3001      	adds	r0, #1
 800273a:	d020      	beq.n	800277e <_printf_common+0xb2>
 800273c:	6823      	ldr	r3, [r4, #0]
 800273e:	68e5      	ldr	r5, [r4, #12]
 8002740:	f8d9 2000 	ldr.w	r2, [r9]
 8002744:	f003 0306 	and.w	r3, r3, #6
 8002748:	2b04      	cmp	r3, #4
 800274a:	bf08      	it	eq
 800274c:	1aad      	subeq	r5, r5, r2
 800274e:	68a3      	ldr	r3, [r4, #8]
 8002750:	6922      	ldr	r2, [r4, #16]
 8002752:	bf0c      	ite	eq
 8002754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002758:	2500      	movne	r5, #0
 800275a:	4293      	cmp	r3, r2
 800275c:	bfc4      	itt	gt
 800275e:	1a9b      	subgt	r3, r3, r2
 8002760:	18ed      	addgt	r5, r5, r3
 8002762:	f04f 0900 	mov.w	r9, #0
 8002766:	341a      	adds	r4, #26
 8002768:	454d      	cmp	r5, r9
 800276a:	d11a      	bne.n	80027a2 <_printf_common+0xd6>
 800276c:	2000      	movs	r0, #0
 800276e:	e008      	b.n	8002782 <_printf_common+0xb6>
 8002770:	2301      	movs	r3, #1
 8002772:	4652      	mov	r2, sl
 8002774:	4639      	mov	r1, r7
 8002776:	4630      	mov	r0, r6
 8002778:	47c0      	blx	r8
 800277a:	3001      	adds	r0, #1
 800277c:	d103      	bne.n	8002786 <_printf_common+0xba>
 800277e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002786:	3501      	adds	r5, #1
 8002788:	e7c3      	b.n	8002712 <_printf_common+0x46>
 800278a:	18e1      	adds	r1, r4, r3
 800278c:	1c5a      	adds	r2, r3, #1
 800278e:	2030      	movs	r0, #48	; 0x30
 8002790:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002794:	4422      	add	r2, r4
 8002796:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800279a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800279e:	3302      	adds	r3, #2
 80027a0:	e7c5      	b.n	800272e <_printf_common+0x62>
 80027a2:	2301      	movs	r3, #1
 80027a4:	4622      	mov	r2, r4
 80027a6:	4639      	mov	r1, r7
 80027a8:	4630      	mov	r0, r6
 80027aa:	47c0      	blx	r8
 80027ac:	3001      	adds	r0, #1
 80027ae:	d0e6      	beq.n	800277e <_printf_common+0xb2>
 80027b0:	f109 0901 	add.w	r9, r9, #1
 80027b4:	e7d8      	b.n	8002768 <_printf_common+0x9c>
	...

080027b8 <_printf_i>:
 80027b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80027c0:	460c      	mov	r4, r1
 80027c2:	7e09      	ldrb	r1, [r1, #24]
 80027c4:	b085      	sub	sp, #20
 80027c6:	296e      	cmp	r1, #110	; 0x6e
 80027c8:	4617      	mov	r7, r2
 80027ca:	4606      	mov	r6, r0
 80027cc:	4698      	mov	r8, r3
 80027ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80027d0:	f000 80b3 	beq.w	800293a <_printf_i+0x182>
 80027d4:	d822      	bhi.n	800281c <_printf_i+0x64>
 80027d6:	2963      	cmp	r1, #99	; 0x63
 80027d8:	d036      	beq.n	8002848 <_printf_i+0x90>
 80027da:	d80a      	bhi.n	80027f2 <_printf_i+0x3a>
 80027dc:	2900      	cmp	r1, #0
 80027de:	f000 80b9 	beq.w	8002954 <_printf_i+0x19c>
 80027e2:	2958      	cmp	r1, #88	; 0x58
 80027e4:	f000 8083 	beq.w	80028ee <_printf_i+0x136>
 80027e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80027f0:	e032      	b.n	8002858 <_printf_i+0xa0>
 80027f2:	2964      	cmp	r1, #100	; 0x64
 80027f4:	d001      	beq.n	80027fa <_printf_i+0x42>
 80027f6:	2969      	cmp	r1, #105	; 0x69
 80027f8:	d1f6      	bne.n	80027e8 <_printf_i+0x30>
 80027fa:	6820      	ldr	r0, [r4, #0]
 80027fc:	6813      	ldr	r3, [r2, #0]
 80027fe:	0605      	lsls	r5, r0, #24
 8002800:	f103 0104 	add.w	r1, r3, #4
 8002804:	d52a      	bpl.n	800285c <_printf_i+0xa4>
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6011      	str	r1, [r2, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	da03      	bge.n	8002816 <_printf_i+0x5e>
 800280e:	222d      	movs	r2, #45	; 0x2d
 8002810:	425b      	negs	r3, r3
 8002812:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002816:	486f      	ldr	r0, [pc, #444]	; (80029d4 <_printf_i+0x21c>)
 8002818:	220a      	movs	r2, #10
 800281a:	e039      	b.n	8002890 <_printf_i+0xd8>
 800281c:	2973      	cmp	r1, #115	; 0x73
 800281e:	f000 809d 	beq.w	800295c <_printf_i+0x1a4>
 8002822:	d808      	bhi.n	8002836 <_printf_i+0x7e>
 8002824:	296f      	cmp	r1, #111	; 0x6f
 8002826:	d020      	beq.n	800286a <_printf_i+0xb2>
 8002828:	2970      	cmp	r1, #112	; 0x70
 800282a:	d1dd      	bne.n	80027e8 <_printf_i+0x30>
 800282c:	6823      	ldr	r3, [r4, #0]
 800282e:	f043 0320 	orr.w	r3, r3, #32
 8002832:	6023      	str	r3, [r4, #0]
 8002834:	e003      	b.n	800283e <_printf_i+0x86>
 8002836:	2975      	cmp	r1, #117	; 0x75
 8002838:	d017      	beq.n	800286a <_printf_i+0xb2>
 800283a:	2978      	cmp	r1, #120	; 0x78
 800283c:	d1d4      	bne.n	80027e8 <_printf_i+0x30>
 800283e:	2378      	movs	r3, #120	; 0x78
 8002840:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002844:	4864      	ldr	r0, [pc, #400]	; (80029d8 <_printf_i+0x220>)
 8002846:	e055      	b.n	80028f4 <_printf_i+0x13c>
 8002848:	6813      	ldr	r3, [r2, #0]
 800284a:	1d19      	adds	r1, r3, #4
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6011      	str	r1, [r2, #0]
 8002850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002858:	2301      	movs	r3, #1
 800285a:	e08c      	b.n	8002976 <_printf_i+0x1be>
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6011      	str	r1, [r2, #0]
 8002860:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002864:	bf18      	it	ne
 8002866:	b21b      	sxthne	r3, r3
 8002868:	e7cf      	b.n	800280a <_printf_i+0x52>
 800286a:	6813      	ldr	r3, [r2, #0]
 800286c:	6825      	ldr	r5, [r4, #0]
 800286e:	1d18      	adds	r0, r3, #4
 8002870:	6010      	str	r0, [r2, #0]
 8002872:	0628      	lsls	r0, r5, #24
 8002874:	d501      	bpl.n	800287a <_printf_i+0xc2>
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	e002      	b.n	8002880 <_printf_i+0xc8>
 800287a:	0668      	lsls	r0, r5, #25
 800287c:	d5fb      	bpl.n	8002876 <_printf_i+0xbe>
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	4854      	ldr	r0, [pc, #336]	; (80029d4 <_printf_i+0x21c>)
 8002882:	296f      	cmp	r1, #111	; 0x6f
 8002884:	bf14      	ite	ne
 8002886:	220a      	movne	r2, #10
 8002888:	2208      	moveq	r2, #8
 800288a:	2100      	movs	r1, #0
 800288c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002890:	6865      	ldr	r5, [r4, #4]
 8002892:	60a5      	str	r5, [r4, #8]
 8002894:	2d00      	cmp	r5, #0
 8002896:	f2c0 8095 	blt.w	80029c4 <_printf_i+0x20c>
 800289a:	6821      	ldr	r1, [r4, #0]
 800289c:	f021 0104 	bic.w	r1, r1, #4
 80028a0:	6021      	str	r1, [r4, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d13d      	bne.n	8002922 <_printf_i+0x16a>
 80028a6:	2d00      	cmp	r5, #0
 80028a8:	f040 808e 	bne.w	80029c8 <_printf_i+0x210>
 80028ac:	4665      	mov	r5, ip
 80028ae:	2a08      	cmp	r2, #8
 80028b0:	d10b      	bne.n	80028ca <_printf_i+0x112>
 80028b2:	6823      	ldr	r3, [r4, #0]
 80028b4:	07db      	lsls	r3, r3, #31
 80028b6:	d508      	bpl.n	80028ca <_printf_i+0x112>
 80028b8:	6923      	ldr	r3, [r4, #16]
 80028ba:	6862      	ldr	r2, [r4, #4]
 80028bc:	429a      	cmp	r2, r3
 80028be:	bfde      	ittt	le
 80028c0:	2330      	movle	r3, #48	; 0x30
 80028c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80028c6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80028ca:	ebac 0305 	sub.w	r3, ip, r5
 80028ce:	6123      	str	r3, [r4, #16]
 80028d0:	f8cd 8000 	str.w	r8, [sp]
 80028d4:	463b      	mov	r3, r7
 80028d6:	aa03      	add	r2, sp, #12
 80028d8:	4621      	mov	r1, r4
 80028da:	4630      	mov	r0, r6
 80028dc:	f7ff fef6 	bl	80026cc <_printf_common>
 80028e0:	3001      	adds	r0, #1
 80028e2:	d14d      	bne.n	8002980 <_printf_i+0x1c8>
 80028e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028e8:	b005      	add	sp, #20
 80028ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80028ee:	4839      	ldr	r0, [pc, #228]	; (80029d4 <_printf_i+0x21c>)
 80028f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80028f4:	6813      	ldr	r3, [r2, #0]
 80028f6:	6821      	ldr	r1, [r4, #0]
 80028f8:	1d1d      	adds	r5, r3, #4
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6015      	str	r5, [r2, #0]
 80028fe:	060a      	lsls	r2, r1, #24
 8002900:	d50b      	bpl.n	800291a <_printf_i+0x162>
 8002902:	07ca      	lsls	r2, r1, #31
 8002904:	bf44      	itt	mi
 8002906:	f041 0120 	orrmi.w	r1, r1, #32
 800290a:	6021      	strmi	r1, [r4, #0]
 800290c:	b91b      	cbnz	r3, 8002916 <_printf_i+0x15e>
 800290e:	6822      	ldr	r2, [r4, #0]
 8002910:	f022 0220 	bic.w	r2, r2, #32
 8002914:	6022      	str	r2, [r4, #0]
 8002916:	2210      	movs	r2, #16
 8002918:	e7b7      	b.n	800288a <_printf_i+0xd2>
 800291a:	064d      	lsls	r5, r1, #25
 800291c:	bf48      	it	mi
 800291e:	b29b      	uxthmi	r3, r3
 8002920:	e7ef      	b.n	8002902 <_printf_i+0x14a>
 8002922:	4665      	mov	r5, ip
 8002924:	fbb3 f1f2 	udiv	r1, r3, r2
 8002928:	fb02 3311 	mls	r3, r2, r1, r3
 800292c:	5cc3      	ldrb	r3, [r0, r3]
 800292e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002932:	460b      	mov	r3, r1
 8002934:	2900      	cmp	r1, #0
 8002936:	d1f5      	bne.n	8002924 <_printf_i+0x16c>
 8002938:	e7b9      	b.n	80028ae <_printf_i+0xf6>
 800293a:	6813      	ldr	r3, [r2, #0]
 800293c:	6825      	ldr	r5, [r4, #0]
 800293e:	6961      	ldr	r1, [r4, #20]
 8002940:	1d18      	adds	r0, r3, #4
 8002942:	6010      	str	r0, [r2, #0]
 8002944:	0628      	lsls	r0, r5, #24
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	d501      	bpl.n	800294e <_printf_i+0x196>
 800294a:	6019      	str	r1, [r3, #0]
 800294c:	e002      	b.n	8002954 <_printf_i+0x19c>
 800294e:	066a      	lsls	r2, r5, #25
 8002950:	d5fb      	bpl.n	800294a <_printf_i+0x192>
 8002952:	8019      	strh	r1, [r3, #0]
 8002954:	2300      	movs	r3, #0
 8002956:	6123      	str	r3, [r4, #16]
 8002958:	4665      	mov	r5, ip
 800295a:	e7b9      	b.n	80028d0 <_printf_i+0x118>
 800295c:	6813      	ldr	r3, [r2, #0]
 800295e:	1d19      	adds	r1, r3, #4
 8002960:	6011      	str	r1, [r2, #0]
 8002962:	681d      	ldr	r5, [r3, #0]
 8002964:	6862      	ldr	r2, [r4, #4]
 8002966:	2100      	movs	r1, #0
 8002968:	4628      	mov	r0, r5
 800296a:	f7fd fc59 	bl	8000220 <memchr>
 800296e:	b108      	cbz	r0, 8002974 <_printf_i+0x1bc>
 8002970:	1b40      	subs	r0, r0, r5
 8002972:	6060      	str	r0, [r4, #4]
 8002974:	6863      	ldr	r3, [r4, #4]
 8002976:	6123      	str	r3, [r4, #16]
 8002978:	2300      	movs	r3, #0
 800297a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800297e:	e7a7      	b.n	80028d0 <_printf_i+0x118>
 8002980:	6923      	ldr	r3, [r4, #16]
 8002982:	462a      	mov	r2, r5
 8002984:	4639      	mov	r1, r7
 8002986:	4630      	mov	r0, r6
 8002988:	47c0      	blx	r8
 800298a:	3001      	adds	r0, #1
 800298c:	d0aa      	beq.n	80028e4 <_printf_i+0x12c>
 800298e:	6823      	ldr	r3, [r4, #0]
 8002990:	079b      	lsls	r3, r3, #30
 8002992:	d413      	bmi.n	80029bc <_printf_i+0x204>
 8002994:	68e0      	ldr	r0, [r4, #12]
 8002996:	9b03      	ldr	r3, [sp, #12]
 8002998:	4298      	cmp	r0, r3
 800299a:	bfb8      	it	lt
 800299c:	4618      	movlt	r0, r3
 800299e:	e7a3      	b.n	80028e8 <_printf_i+0x130>
 80029a0:	2301      	movs	r3, #1
 80029a2:	464a      	mov	r2, r9
 80029a4:	4639      	mov	r1, r7
 80029a6:	4630      	mov	r0, r6
 80029a8:	47c0      	blx	r8
 80029aa:	3001      	adds	r0, #1
 80029ac:	d09a      	beq.n	80028e4 <_printf_i+0x12c>
 80029ae:	3501      	adds	r5, #1
 80029b0:	68e3      	ldr	r3, [r4, #12]
 80029b2:	9a03      	ldr	r2, [sp, #12]
 80029b4:	1a9b      	subs	r3, r3, r2
 80029b6:	42ab      	cmp	r3, r5
 80029b8:	dcf2      	bgt.n	80029a0 <_printf_i+0x1e8>
 80029ba:	e7eb      	b.n	8002994 <_printf_i+0x1dc>
 80029bc:	2500      	movs	r5, #0
 80029be:	f104 0919 	add.w	r9, r4, #25
 80029c2:	e7f5      	b.n	80029b0 <_printf_i+0x1f8>
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1ac      	bne.n	8002922 <_printf_i+0x16a>
 80029c8:	7803      	ldrb	r3, [r0, #0]
 80029ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80029ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029d2:	e76c      	b.n	80028ae <_printf_i+0xf6>
 80029d4:	08002d91 	.word	0x08002d91
 80029d8:	08002da2 	.word	0x08002da2

080029dc <memcpy>:
 80029dc:	b510      	push	{r4, lr}
 80029de:	1e43      	subs	r3, r0, #1
 80029e0:	440a      	add	r2, r1
 80029e2:	4291      	cmp	r1, r2
 80029e4:	d100      	bne.n	80029e8 <memcpy+0xc>
 80029e6:	bd10      	pop	{r4, pc}
 80029e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80029ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80029f0:	e7f7      	b.n	80029e2 <memcpy+0x6>

080029f2 <memmove>:
 80029f2:	4288      	cmp	r0, r1
 80029f4:	b510      	push	{r4, lr}
 80029f6:	eb01 0302 	add.w	r3, r1, r2
 80029fa:	d807      	bhi.n	8002a0c <memmove+0x1a>
 80029fc:	1e42      	subs	r2, r0, #1
 80029fe:	4299      	cmp	r1, r3
 8002a00:	d00a      	beq.n	8002a18 <memmove+0x26>
 8002a02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a06:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002a0a:	e7f8      	b.n	80029fe <memmove+0xc>
 8002a0c:	4283      	cmp	r3, r0
 8002a0e:	d9f5      	bls.n	80029fc <memmove+0xa>
 8002a10:	1881      	adds	r1, r0, r2
 8002a12:	1ad2      	subs	r2, r2, r3
 8002a14:	42d3      	cmn	r3, r2
 8002a16:	d100      	bne.n	8002a1a <memmove+0x28>
 8002a18:	bd10      	pop	{r4, pc}
 8002a1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002a1e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002a22:	e7f7      	b.n	8002a14 <memmove+0x22>

08002a24 <_free_r>:
 8002a24:	b538      	push	{r3, r4, r5, lr}
 8002a26:	4605      	mov	r5, r0
 8002a28:	2900      	cmp	r1, #0
 8002a2a:	d045      	beq.n	8002ab8 <_free_r+0x94>
 8002a2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a30:	1f0c      	subs	r4, r1, #4
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	bfb8      	it	lt
 8002a36:	18e4      	addlt	r4, r4, r3
 8002a38:	f000 f8d2 	bl	8002be0 <__malloc_lock>
 8002a3c:	4a1f      	ldr	r2, [pc, #124]	; (8002abc <_free_r+0x98>)
 8002a3e:	6813      	ldr	r3, [r2, #0]
 8002a40:	4610      	mov	r0, r2
 8002a42:	b933      	cbnz	r3, 8002a52 <_free_r+0x2e>
 8002a44:	6063      	str	r3, [r4, #4]
 8002a46:	6014      	str	r4, [r2, #0]
 8002a48:	4628      	mov	r0, r5
 8002a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a4e:	f000 b8c8 	b.w	8002be2 <__malloc_unlock>
 8002a52:	42a3      	cmp	r3, r4
 8002a54:	d90c      	bls.n	8002a70 <_free_r+0x4c>
 8002a56:	6821      	ldr	r1, [r4, #0]
 8002a58:	1862      	adds	r2, r4, r1
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	bf04      	itt	eq
 8002a5e:	681a      	ldreq	r2, [r3, #0]
 8002a60:	685b      	ldreq	r3, [r3, #4]
 8002a62:	6063      	str	r3, [r4, #4]
 8002a64:	bf04      	itt	eq
 8002a66:	1852      	addeq	r2, r2, r1
 8002a68:	6022      	streq	r2, [r4, #0]
 8002a6a:	6004      	str	r4, [r0, #0]
 8002a6c:	e7ec      	b.n	8002a48 <_free_r+0x24>
 8002a6e:	4613      	mov	r3, r2
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	b10a      	cbz	r2, 8002a78 <_free_r+0x54>
 8002a74:	42a2      	cmp	r2, r4
 8002a76:	d9fa      	bls.n	8002a6e <_free_r+0x4a>
 8002a78:	6819      	ldr	r1, [r3, #0]
 8002a7a:	1858      	adds	r0, r3, r1
 8002a7c:	42a0      	cmp	r0, r4
 8002a7e:	d10b      	bne.n	8002a98 <_free_r+0x74>
 8002a80:	6820      	ldr	r0, [r4, #0]
 8002a82:	4401      	add	r1, r0
 8002a84:	1858      	adds	r0, r3, r1
 8002a86:	4282      	cmp	r2, r0
 8002a88:	6019      	str	r1, [r3, #0]
 8002a8a:	d1dd      	bne.n	8002a48 <_free_r+0x24>
 8002a8c:	6810      	ldr	r0, [r2, #0]
 8002a8e:	6852      	ldr	r2, [r2, #4]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	4401      	add	r1, r0
 8002a94:	6019      	str	r1, [r3, #0]
 8002a96:	e7d7      	b.n	8002a48 <_free_r+0x24>
 8002a98:	d902      	bls.n	8002aa0 <_free_r+0x7c>
 8002a9a:	230c      	movs	r3, #12
 8002a9c:	602b      	str	r3, [r5, #0]
 8002a9e:	e7d3      	b.n	8002a48 <_free_r+0x24>
 8002aa0:	6820      	ldr	r0, [r4, #0]
 8002aa2:	1821      	adds	r1, r4, r0
 8002aa4:	428a      	cmp	r2, r1
 8002aa6:	bf04      	itt	eq
 8002aa8:	6811      	ldreq	r1, [r2, #0]
 8002aaa:	6852      	ldreq	r2, [r2, #4]
 8002aac:	6062      	str	r2, [r4, #4]
 8002aae:	bf04      	itt	eq
 8002ab0:	1809      	addeq	r1, r1, r0
 8002ab2:	6021      	streq	r1, [r4, #0]
 8002ab4:	605c      	str	r4, [r3, #4]
 8002ab6:	e7c7      	b.n	8002a48 <_free_r+0x24>
 8002ab8:	bd38      	pop	{r3, r4, r5, pc}
 8002aba:	bf00      	nop
 8002abc:	20000090 	.word	0x20000090

08002ac0 <_malloc_r>:
 8002ac0:	b570      	push	{r4, r5, r6, lr}
 8002ac2:	1ccd      	adds	r5, r1, #3
 8002ac4:	f025 0503 	bic.w	r5, r5, #3
 8002ac8:	3508      	adds	r5, #8
 8002aca:	2d0c      	cmp	r5, #12
 8002acc:	bf38      	it	cc
 8002ace:	250c      	movcc	r5, #12
 8002ad0:	2d00      	cmp	r5, #0
 8002ad2:	4606      	mov	r6, r0
 8002ad4:	db01      	blt.n	8002ada <_malloc_r+0x1a>
 8002ad6:	42a9      	cmp	r1, r5
 8002ad8:	d903      	bls.n	8002ae2 <_malloc_r+0x22>
 8002ada:	230c      	movs	r3, #12
 8002adc:	6033      	str	r3, [r6, #0]
 8002ade:	2000      	movs	r0, #0
 8002ae0:	bd70      	pop	{r4, r5, r6, pc}
 8002ae2:	f000 f87d 	bl	8002be0 <__malloc_lock>
 8002ae6:	4a21      	ldr	r2, [pc, #132]	; (8002b6c <_malloc_r+0xac>)
 8002ae8:	6814      	ldr	r4, [r2, #0]
 8002aea:	4621      	mov	r1, r4
 8002aec:	b991      	cbnz	r1, 8002b14 <_malloc_r+0x54>
 8002aee:	4c20      	ldr	r4, [pc, #128]	; (8002b70 <_malloc_r+0xb0>)
 8002af0:	6823      	ldr	r3, [r4, #0]
 8002af2:	b91b      	cbnz	r3, 8002afc <_malloc_r+0x3c>
 8002af4:	4630      	mov	r0, r6
 8002af6:	f000 f863 	bl	8002bc0 <_sbrk_r>
 8002afa:	6020      	str	r0, [r4, #0]
 8002afc:	4629      	mov	r1, r5
 8002afe:	4630      	mov	r0, r6
 8002b00:	f000 f85e 	bl	8002bc0 <_sbrk_r>
 8002b04:	1c43      	adds	r3, r0, #1
 8002b06:	d124      	bne.n	8002b52 <_malloc_r+0x92>
 8002b08:	230c      	movs	r3, #12
 8002b0a:	6033      	str	r3, [r6, #0]
 8002b0c:	4630      	mov	r0, r6
 8002b0e:	f000 f868 	bl	8002be2 <__malloc_unlock>
 8002b12:	e7e4      	b.n	8002ade <_malloc_r+0x1e>
 8002b14:	680b      	ldr	r3, [r1, #0]
 8002b16:	1b5b      	subs	r3, r3, r5
 8002b18:	d418      	bmi.n	8002b4c <_malloc_r+0x8c>
 8002b1a:	2b0b      	cmp	r3, #11
 8002b1c:	d90f      	bls.n	8002b3e <_malloc_r+0x7e>
 8002b1e:	600b      	str	r3, [r1, #0]
 8002b20:	50cd      	str	r5, [r1, r3]
 8002b22:	18cc      	adds	r4, r1, r3
 8002b24:	4630      	mov	r0, r6
 8002b26:	f000 f85c 	bl	8002be2 <__malloc_unlock>
 8002b2a:	f104 000b 	add.w	r0, r4, #11
 8002b2e:	1d23      	adds	r3, r4, #4
 8002b30:	f020 0007 	bic.w	r0, r0, #7
 8002b34:	1ac3      	subs	r3, r0, r3
 8002b36:	d0d3      	beq.n	8002ae0 <_malloc_r+0x20>
 8002b38:	425a      	negs	r2, r3
 8002b3a:	50e2      	str	r2, [r4, r3]
 8002b3c:	e7d0      	b.n	8002ae0 <_malloc_r+0x20>
 8002b3e:	428c      	cmp	r4, r1
 8002b40:	684b      	ldr	r3, [r1, #4]
 8002b42:	bf16      	itet	ne
 8002b44:	6063      	strne	r3, [r4, #4]
 8002b46:	6013      	streq	r3, [r2, #0]
 8002b48:	460c      	movne	r4, r1
 8002b4a:	e7eb      	b.n	8002b24 <_malloc_r+0x64>
 8002b4c:	460c      	mov	r4, r1
 8002b4e:	6849      	ldr	r1, [r1, #4]
 8002b50:	e7cc      	b.n	8002aec <_malloc_r+0x2c>
 8002b52:	1cc4      	adds	r4, r0, #3
 8002b54:	f024 0403 	bic.w	r4, r4, #3
 8002b58:	42a0      	cmp	r0, r4
 8002b5a:	d005      	beq.n	8002b68 <_malloc_r+0xa8>
 8002b5c:	1a21      	subs	r1, r4, r0
 8002b5e:	4630      	mov	r0, r6
 8002b60:	f000 f82e 	bl	8002bc0 <_sbrk_r>
 8002b64:	3001      	adds	r0, #1
 8002b66:	d0cf      	beq.n	8002b08 <_malloc_r+0x48>
 8002b68:	6025      	str	r5, [r4, #0]
 8002b6a:	e7db      	b.n	8002b24 <_malloc_r+0x64>
 8002b6c:	20000090 	.word	0x20000090
 8002b70:	20000094 	.word	0x20000094

08002b74 <_realloc_r>:
 8002b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b76:	4607      	mov	r7, r0
 8002b78:	4614      	mov	r4, r2
 8002b7a:	460e      	mov	r6, r1
 8002b7c:	b921      	cbnz	r1, 8002b88 <_realloc_r+0x14>
 8002b7e:	4611      	mov	r1, r2
 8002b80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002b84:	f7ff bf9c 	b.w	8002ac0 <_malloc_r>
 8002b88:	b922      	cbnz	r2, 8002b94 <_realloc_r+0x20>
 8002b8a:	f7ff ff4b 	bl	8002a24 <_free_r>
 8002b8e:	4625      	mov	r5, r4
 8002b90:	4628      	mov	r0, r5
 8002b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b94:	f000 f826 	bl	8002be4 <_malloc_usable_size_r>
 8002b98:	42a0      	cmp	r0, r4
 8002b9a:	d20f      	bcs.n	8002bbc <_realloc_r+0x48>
 8002b9c:	4621      	mov	r1, r4
 8002b9e:	4638      	mov	r0, r7
 8002ba0:	f7ff ff8e 	bl	8002ac0 <_malloc_r>
 8002ba4:	4605      	mov	r5, r0
 8002ba6:	2800      	cmp	r0, #0
 8002ba8:	d0f2      	beq.n	8002b90 <_realloc_r+0x1c>
 8002baa:	4631      	mov	r1, r6
 8002bac:	4622      	mov	r2, r4
 8002bae:	f7ff ff15 	bl	80029dc <memcpy>
 8002bb2:	4631      	mov	r1, r6
 8002bb4:	4638      	mov	r0, r7
 8002bb6:	f7ff ff35 	bl	8002a24 <_free_r>
 8002bba:	e7e9      	b.n	8002b90 <_realloc_r+0x1c>
 8002bbc:	4635      	mov	r5, r6
 8002bbe:	e7e7      	b.n	8002b90 <_realloc_r+0x1c>

08002bc0 <_sbrk_r>:
 8002bc0:	b538      	push	{r3, r4, r5, lr}
 8002bc2:	4c06      	ldr	r4, [pc, #24]	; (8002bdc <_sbrk_r+0x1c>)
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	4605      	mov	r5, r0
 8002bc8:	4608      	mov	r0, r1
 8002bca:	6023      	str	r3, [r4, #0]
 8002bcc:	f7ff fb4e 	bl	800226c <_sbrk>
 8002bd0:	1c43      	adds	r3, r0, #1
 8002bd2:	d102      	bne.n	8002bda <_sbrk_r+0x1a>
 8002bd4:	6823      	ldr	r3, [r4, #0]
 8002bd6:	b103      	cbz	r3, 8002bda <_sbrk_r+0x1a>
 8002bd8:	602b      	str	r3, [r5, #0]
 8002bda:	bd38      	pop	{r3, r4, r5, pc}
 8002bdc:	20000124 	.word	0x20000124

08002be0 <__malloc_lock>:
 8002be0:	4770      	bx	lr

08002be2 <__malloc_unlock>:
 8002be2:	4770      	bx	lr

08002be4 <_malloc_usable_size_r>:
 8002be4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002be8:	1f18      	subs	r0, r3, #4
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	bfbc      	itt	lt
 8002bee:	580b      	ldrlt	r3, [r1, r0]
 8002bf0:	18c0      	addlt	r0, r0, r3
 8002bf2:	4770      	bx	lr

08002bf4 <_init>:
 8002bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bf6:	bf00      	nop
 8002bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bfa:	bc08      	pop	{r3}
 8002bfc:	469e      	mov	lr, r3
 8002bfe:	4770      	bx	lr

08002c00 <_fini>:
 8002c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c02:	bf00      	nop
 8002c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c06:	bc08      	pop	{r3}
 8002c08:	469e      	mov	lr, r3
 8002c0a:	4770      	bx	lr
